{
  "about/about.html": {
    "href": "about/about.html",
    "title": "| Orpheus",
    "keywords": ""
  },
  "api/OrpheusAttributes.DataTypeAttribute.html": {
    "href": "api/OrpheusAttributes.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Orpheus",
    "keywords": "Class DataTypeAttribute Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Annotate a property with attribute to set it's DbType public class DataTypeAttribute : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute DataTypeAttribute Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DataTypeAttribute(DbType) Initializes a new instance of the DataTypeAttribute class. public DataTypeAttribute(DbType dbType) Parameters dbType DbType Type of the database. DataTypeAttribute(Int32) Initializes a new instance of the DataTypeAttribute class. public DataTypeAttribute(int dbType) Parameters dbType Int32 Type of the database. Properties DataType Gets the type of the data. public DbType DataType { get; } Property Value DbType The type of the data. See Also OrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.DefaultValue.html": {
    "href": "api/OrpheusAttributes.DefaultValue.html",
    "title": "Class DefaultValue | Orpheus",
    "keywords": "Class DefaultValue Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Default value attribute. Decorate a property with attribute to set it's default value. public class DefaultValue : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute DefaultValue Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DefaultValue(Object) Initializes a new instance of the DefaultValue class. public DefaultValue(object value) Parameters value Object The value. Properties Value Gets the value. public object Value { get; } Property Value Object The value. See Also OrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.FieldName.html": {
    "href": "api/OrpheusAttributes.FieldName.html",
    "title": "Class FieldName | Orpheus",
    "keywords": "Class FieldName Namespace OrpheusAttributes Assembly OrpheusAttributes.dll FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. public class FieldName : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute FieldName Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors FieldName(String) Initializes a new instance of the FieldName class. public FieldName(string fieldName) Parameters fieldName String Name of the field. Properties Name Gets the name. public string Name { get; } Property Value String The name. See Also OrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.ForeignKey.html": {
    "href": "api/OrpheusAttributes.ForeignKey.html",
    "title": "Class ForeignKey | Orpheus",
    "keywords": "Class ForeignKey Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. public class ForeignKey : OrpheusBaseAttribute, IForeignKey, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute ForeignKey Implements IForeignKey IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ForeignKey(String, String, String, Boolean, Boolean) Initializes a new instance of the ForeignKey class. public ForeignKey(string referenceTable, string referenceField, string schemaName = null, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters referenceTable String The reference table. referenceField String The reference field. schemaName String Name of the schema. onDeleteCascade Boolean if set to true [on delete cascade]. onUpdateCascade Boolean if set to true [on update cascade]. ForeignKey(Type, String, String, Boolean, Boolean) Initializes a new instance of the ForeignKey class. public ForeignKey(Type referenceTableType, string referenceField, string schemaName = null, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters referenceTableType Type Type of the reference table. referenceField String The reference field. schemaName String Name of the schema. onDeleteCascade Boolean if set to true [on delete cascade]. onUpdateCascade Boolean if set to true [on update cascade]. Properties Field public string Field { get; set; } Property Value String The foreign key field name. OnDeleteCascade public bool OnDeleteCascade { get; } Property Value Boolean Set to true to enable cascade delete. OnUpdateCascade public bool OnUpdateCascade { get; } Property Value Boolean Set to true to enable cascade update. ReferenceField public string ReferenceField { get; } Property Value String The reference table key. ReferenceTable public string ReferenceTable { get; } Property Value String The reference table. SchemaName public string SchemaName { get; set; } Property Value String Optional. Set the schema name of the reference table, if there is one. See Also OrpheusBaseAttribute IForeignKey"
  },
  "api/OrpheusAttributes.Length.html": {
    "href": "api/OrpheusAttributes.Length.html",
    "title": "Class Length | Orpheus",
    "keywords": "Class Length Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. public class Length : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute Length Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors Length(Int32) Initializes a new instance of the Length class. public Length(int value) Parameters value Int32 The value. Properties Value Gets the value. public int Value { get; } Property Value Int32 The value."
  },
  "api/OrpheusAttributes.OrpheusBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusBaseAttribute.html",
    "title": "Class OrpheusBaseAttribute | Orpheus",
    "keywords": "Class OrpheusBaseAttribute Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Orpheus base attribute. public class OrpheusBaseAttribute : Attribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute Implements IOrpheusBaseAttribute Derived DataTypeAttribute DefaultValue FieldName ForeignKey Length OrpheusCompositeKeyBaseAttribute PrimaryKey RequiredField SchemaIgnore SQLServerSchemaName TableName UniqueKey Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() See Also Attribute IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html",
    "title": "Class OrpheusCompositeKeyBaseAttribute | Orpheus",
    "keywords": "Class OrpheusCompositeKeyBaseAttribute Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. public class OrpheusCompositeKeyBaseAttribute : OrpheusBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute Derived PrimaryCompositeKey UniqueCompositeKey Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusCompositeKeyBaseAttribute(String[], String) Initializes a new instance of the OrpheusCompositeKeyBaseAttribute class. public OrpheusCompositeKeyBaseAttribute(string[] fields, string sort = null) Parameters fields String[] The fields. sort String The sort direction. Properties Fields public string[] Fields { get; } Property Value String[] List of fields that are the key. Sort public string Sort { get; } Property Value String Sort for the key. See Also OrpheusBaseAttribute IOrpheusBaseCompositeKeyAttribute"
  },
  "api/OrpheusAttributes.PrimaryCompositeKey.html": {
    "href": "api/OrpheusAttributes.PrimaryCompositeKey.html",
    "title": "Class PrimaryCompositeKey | Orpheus",
    "keywords": "Class PrimaryCompositeKey Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. public class PrimaryCompositeKey : OrpheusCompositeKeyBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute Inherited Members OrpheusCompositeKeyBaseAttribute.Fields OrpheusCompositeKeyBaseAttribute.Sort Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PrimaryCompositeKey(String[], String) Initializes a new instance of the PrimaryCompositeKey class. public PrimaryCompositeKey(string[] fields, string sort = null) Parameters fields String[] The fields. sort String The sort direction."
  },
  "api/OrpheusAttributes.PrimaryKey.html": {
    "href": "api/OrpheusAttributes.PrimaryKey.html",
    "title": "Class PrimaryKey | Orpheus",
    "keywords": "Class PrimaryKey Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. public class PrimaryKey : OrpheusBaseAttribute, IPrimaryKey, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute PrimaryKey Implements IPrimaryKey IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PrimaryKey(Boolean, Boolean) Initializes a new instance of the PrimaryKey class. public PrimaryKey(bool isAutoGenerated = true, bool isDBGenerated = false) Parameters isAutoGenerated Boolean if set to true [is automatic generated]. isDBGenerated Boolean if set to true [is database generated]. Properties IsAutoGenerated public bool IsAutoGenerated { get; } Property Value Boolean Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. IsDBGenerated public bool IsDBGenerated { get; } Property Value Boolean Indicates if the primary key value is auto-generated."
  },
  "api/OrpheusAttributes.RequiredField.html": {
    "href": "api/OrpheusAttributes.RequiredField.html",
    "title": "Class RequiredField | Orpheus",
    "keywords": "Class RequiredField Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Required field attribute. public class RequiredField : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute RequiredField Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString()"
  },
  "api/OrpheusAttributes.SQLServerSchemaName.html": {
    "href": "api/OrpheusAttributes.SQLServerSchemaName.html",
    "title": "Class SQLServerSchemaName | Orpheus",
    "keywords": "Class SQLServerSchemaName Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Schema name attribute. Decorate a class with this attribute, to define to which schema the model exists. It's only applicable when the underlying database engine is SQL server, as it's the only one, from the supported database engines, that has this functionality. [AttributeUsage(AttributeTargets.Class)] public class SQLServerSchemaName : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute SQLServerSchemaName Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SQLServerSchemaName(String) Initializes a new instance of the SQLServerSchemaName class. public SQLServerSchemaName(string schemaName) Parameters schemaName String Name of the schema. Properties SchemaName public string SchemaName { get; } Property Value String The schema name."
  },
  "api/OrpheusAttributes.SchemaIgnore.html": {
    "href": "api/OrpheusAttributes.SchemaIgnore.html",
    "title": "Class SchemaIgnore | Orpheus",
    "keywords": "Class SchemaIgnore Namespace OrpheusAttributes Assembly OrpheusAttributes.dll SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. public class SchemaIgnore : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute SchemaIgnore Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString()"
  },
  "api/OrpheusAttributes.TableName.html": {
    "href": "api/OrpheusAttributes.TableName.html",
    "title": "Class TableName | Orpheus",
    "keywords": "Class TableName Namespace OrpheusAttributes Assembly OrpheusAttributes.dll TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. public class TableName : OrpheusBaseAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute TableName Implements IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors TableName(String) Initializes a new instance of the TableName class. public TableName(string tableName) Parameters tableName String Name of the table. Properties Name public string Name { get; } Property Value String Table name."
  },
  "api/OrpheusAttributes.UniqueCompositeKey.html": {
    "href": "api/OrpheusAttributes.UniqueCompositeKey.html",
    "title": "Class UniqueCompositeKey | Orpheus",
    "keywords": "Class UniqueCompositeKey Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute UniqueCompositeKey Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute Inherited Members OrpheusCompositeKeyBaseAttribute.Fields OrpheusCompositeKeyBaseAttribute.Sort Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors UniqueCompositeKey(String[], String) Initializes a new instance of the UniqueCompositeKey class. public UniqueCompositeKey(string[] fields, string sort = null) Parameters fields String[] The fields. sort String The sort direction."
  },
  "api/OrpheusAttributes.UniqueKey.html": {
    "href": "api/OrpheusAttributes.UniqueKey.html",
    "title": "Class UniqueKey | Orpheus",
    "keywords": "Class UniqueKey Namespace OrpheusAttributes Assembly OrpheusAttributes.dll Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object. public class UniqueKey : OrpheusBaseAttribute, IUniqueKey, IOrpheusBaseAttribute Inheritance Object Attribute OrpheusBaseAttribute UniqueKey Implements IUniqueKey IOrpheusBaseAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString()"
  },
  "api/OrpheusAttributes.html": {
    "href": "api/OrpheusAttributes.html",
    "title": "Namespace OrpheusAttributes | Orpheus",
    "keywords": "Namespace OrpheusAttributes Classes DataTypeAttribute Annotate a property with attribute to set it's DbType DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. FieldName FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. OrpheusBaseAttribute Orpheus base attribute. OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. RequiredField Required field attribute. SchemaIgnore SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. SQLServerSchemaName Schema name attribute. Decorate a class with this attribute, to define to which schema the model exists. It's only applicable when the underlying database engine is SQL server, as it's the only one, from the supported database engines, that has this functionality. TableName TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object."
  },
  "api/OrpheusCore.Configuration.ConfigurationManager.html": {
    "href": "api/OrpheusCore.Configuration.ConfigurationManager.html",
    "title": "Class ConfigurationManager | Orpheus",
    "keywords": "Class ConfigurationManager Namespace OrpheusCore.Configuration Assembly OrpheusCore.dll Orpheus configuration manager. public static class ConfigurationManager Inheritance Object ConfigurationManager Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Configuration Current Orpheus configuration. public static OrpheusConfiguration Configuration { get; } Property Value OrpheusConfiguration Methods InitializeOrpheusConfiguration(IConfiguration) Extension method to initialize Orpheus configuration. public static IConfiguration InitializeOrpheusConfiguration(this IConfiguration configuration) Parameters configuration IConfiguration Returns IConfiguration"
  },
  "api/OrpheusCore.Configuration.Models.DIBinderOptions.html": {
    "href": "api/OrpheusCore.Configuration.Models.DIBinderOptions.html",
    "title": "Class DIBinderOptions | Orpheus",
    "keywords": "Class DIBinderOptions Namespace OrpheusCore.Configuration.Models Assembly OrpheusCore.dll Binder options with dependency injection type resolution support. public class DIBinderOptions : BinderOptions Inheritance Object BinderOptions DIBinderOptions Inherited Members BinderOptions.BindNonPublicProperties BinderOptions.ErrorOnUnknownConfiguration Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties ServiceProvider Gets or sets the service provider. public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider The service provider. See Also BinderOptions"
  },
  "api/OrpheusCore.Configuration.Models.DatabaseConnectionConfiguration.html": {
    "href": "api/OrpheusCore.Configuration.Models.DatabaseConnectionConfiguration.html",
    "title": "Class DatabaseConnectionConfiguration | Orpheus",
    "keywords": "Class DatabaseConnectionConfiguration Namespace OrpheusCore.Configuration.Models Assembly OrpheusCore.dll Orpheus database configuration. public class DatabaseConnectionConfiguration : IDatabaseConnectionConfiguration Inheritance Object DatabaseConnectionConfiguration Implements IDatabaseConnectionConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties ConfigurationName public string ConfigurationName { get; set; } Property Value String Database configuration name. DatabaseName public string DatabaseName { get; set; } Property Value String The database name. EncyrptConnection Set if the connection will be encrytped or not. public EncyrptConnection EncyrptConnection { get; set; } Property Value EncyrptConnection Password public string Password { get; set; } Property Value String Password. Server public string Server { get; set; } Property Value String Server name or IP address. ServicePassword public string ServicePassword { get; set; } Property Value String Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. The ServicePassword is the one that will be used for that connection. ServiceUserName public string ServiceUserName { get; set; } Property Value String Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. The ServiceUserName is the one that will be used for that connection. TrustServerCertificate True to trust the server certificate. Default is true. public bool TrustServerCertificate { get; set; } Property Value Boolean UseIntegratedSecurity public bool UseIntegratedSecurity { get; set; } Property Value Boolean SQL Server specific. If true, any UserName/Password configured will be ignored. UseIntegratedSecurityForServiceConnection public bool UseIntegratedSecurityForServiceConnection { get; set; } Property Value Boolean Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. This boolean sets this second connection, integrated security setting. UserName public string UserName { get; set; } Property Value String User name. Methods Clone() Creates a clone of this database configuration. public IDatabaseConnectionConfiguration Clone() Returns IDatabaseConnectionConfiguration"
  },
  "api/OrpheusCore.Configuration.Models.OrpheusConfiguration.html": {
    "href": "api/OrpheusCore.Configuration.Models.OrpheusConfiguration.html",
    "title": "Class OrpheusConfiguration | Orpheus",
    "keywords": "Class OrpheusConfiguration Namespace OrpheusCore.Configuration.Models Assembly OrpheusCore.dll Orpheus's configuration. public class OrpheusConfiguration Inheritance Object OrpheusConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusConfiguration() Initializes a new instance of the OrpheusConfiguration class. public OrpheusConfiguration() Properties DatabaseConnections Gets or sets the database connections. public List<DatabaseConnectionConfiguration> DatabaseConnections { get; set; } Property Value List<DatabaseConnectionConfiguration> The database connections. DefaultStringSize Gets or sets the default size of the string. public int DefaultStringSize { get; set; } Property Value Int32 The default size of a string field, when creating the db schema."
  },
  "api/OrpheusCore.Configuration.Models.ServiceProviderItem.html": {
    "href": "api/OrpheusCore.Configuration.Models.ServiceProviderItem.html",
    "title": "Class ServiceProviderItem | Orpheus",
    "keywords": "Class ServiceProviderItem Namespace OrpheusCore.Configuration.Models Assembly OrpheusCore.dll Service DI configuration item. public class ServiceProviderItem Inheritance Object ServiceProviderItem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ServiceProviderItem() Initializes a new instance of the ServiceProviderItem class. public ServiceProviderItem() Properties ConstructorParameters Gets or sets the constructor parameters. public List<string> ConstructorParameters { get; set; } Property Value List<String> The constructor parameters. Remarks Obsolete Implementation Gets or sets the implementation. public string Implementation { get; set; } Property Value String The implementation. Service Gets or sets the service. public string Service { get; set; } Property Value String The service. ServiceLifetime Gets or sets the service lifetime. [JsonConverter(typeof(StringEnumConverter))] public ServiceLifetime ServiceLifetime { get; set; } Property Value ServiceLifetime The service lifetime."
  },
  "api/OrpheusCore.Configuration.Models.TardigradeConfigurationBinder.html": {
    "href": "api/OrpheusCore.Configuration.Models.TardigradeConfigurationBinder.html",
    "title": "Class TardigradeConfigurationBinder | Orpheus",
    "keywords": "Class TardigradeConfigurationBinder Namespace OrpheusCore.Configuration.Models Assembly OrpheusCore.dll Configuration extensions, with DI support. public static class TardigradeConfigurationBinder Inheritance Object TardigradeConfigurationBinder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods BindDI(IConfiguration, Object, Action<DIBinderOptions>) Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively. public static void BindDI(this IConfiguration configuration, object instance, Action<DIBinderOptions> configureOptions) Parameters configuration IConfiguration The configuration instance to bind. instance Object The object to bind. configureOptions Action<DIBinderOptions> Configures the binder options."
  },
  "api/OrpheusCore.Configuration.Models.html": {
    "href": "api/OrpheusCore.Configuration.Models.html",
    "title": "Namespace OrpheusCore.Configuration.Models | Orpheus",
    "keywords": "Namespace OrpheusCore.Configuration.Models Classes DatabaseConnectionConfiguration Orpheus database configuration. DIBinderOptions Binder options with dependency injection type resolution support. OrpheusConfiguration Orpheus's configuration. ServiceProviderItem Service DI configuration item. TardigradeConfigurationBinder Configuration extensions, with DI support."
  },
  "api/OrpheusCore.Configuration.html": {
    "href": "api/OrpheusCore.Configuration.html",
    "title": "Namespace OrpheusCore.Configuration | Orpheus",
    "keywords": "Namespace OrpheusCore.Configuration Classes ConfigurationManager Orpheus configuration manager."
  },
  "api/OrpheusCore.Errors.ErrorCodes.html": {
    "href": "api/OrpheusCore.Errors.ErrorCodes.html",
    "title": "Class ErrorCodes | Orpheus",
    "keywords": "Class ErrorCodes Namespace OrpheusCore.Errors Assembly OrpheusCore.dll List of known Orpheus error codes. public static class ErrorCodes Inheritance Object ErrorCodes Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields ERR_CANNOT_CONNECT_TO_DB The error cannot connect to database public const int ERR_CANNOT_CONNECT_TO_DB = 100 Field Value Int32 ERR_CANNOT_CREATE_DB The error cannot create database public const int ERR_CANNOT_CREATE_DB = 101 Field Value Int32 ERR_CANNOT_RUN_DDL The error cannot run DDL public const int ERR_CANNOT_RUN_DDL = 102 Field Value Int32 ERR_DELETING_DATA The error deleting data public const int ERR_DELETING_DATA = 201 Field Value Int32 ERR_INSERTING_DATA The error inserting data public const int ERR_INSERTING_DATA = 203 Field Value Int32 ERR_LOADING_DATA The error loading data public const int ERR_LOADING_DATA = 200 Field Value Int32 ERR_SAVING_DATA The error saving data public const int ERR_SAVING_DATA = 204 Field Value Int32 ERR_SCHEMA_ADD_DEPENDENCY The error schema add dependency public const int ERR_SCHEMA_ADD_DEPENDENCY = 301 Field Value Int32 ERR_SCHEMA_EXECUTE The error schema execute public const int ERR_SCHEMA_EXECUTE = 302 Field Value Int32 ERR_SCHEMA_OBJECT_EXISTS The error schema object exists public const int ERR_SCHEMA_OBJECT_EXISTS = 300 Field Value Int32 ERR_SCHEMA_OBJECT_ID The error schema object identifier public const int ERR_SCHEMA_OBJECT_ID = 303 Field Value Int32 ERR_UPDATING_DATA The error updating data public const int ERR_UPDATING_DATA = 202 Field Value Int32"
  },
  "api/OrpheusCore.Errors.ErrorDictionary.html": {
    "href": "api/OrpheusCore.Errors.ErrorDictionary.html",
    "title": "Class ErrorDictionary | Orpheus",
    "keywords": "Class ErrorDictionary Namespace OrpheusCore.Errors Assembly OrpheusCore.dll public static class ErrorDictionary Inheritance Object ErrorDictionary Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods GetError(Int32) Gets the error. public static string GetError(int errorCode) Parameters errorCode Int32 The error code. Returns String"
  },
  "api/OrpheusCore.Errors.html": {
    "href": "api/OrpheusCore.Errors.html",
    "title": "Namespace OrpheusCore.Errors | Orpheus",
    "keywords": "Namespace OrpheusCore.Errors Classes ErrorCodes List of known Orpheus error codes. ErrorDictionary"
  },
  "api/OrpheusCore.ModelProperty.html": {
    "href": "api/OrpheusCore.ModelProperty.html",
    "title": "Delegate ModelProperty | Orpheus",
    "keywords": "Delegate ModelProperty Namespace OrpheusCore Assembly OrpheusCore.dll Helper delegate, to be called when iterating through model's properties. public delegate void ModelProperty(PropertyInfo property); Parameters property PropertyInfo"
  },
  "api/OrpheusCore.ModifiedRecordAction.html": {
    "href": "api/OrpheusCore.ModifiedRecordAction.html",
    "title": "Enum ModifiedRecordAction | Orpheus",
    "keywords": "Enum ModifiedRecordAction Namespace OrpheusCore Assembly OrpheusCore.dll Modified record action. public enum ModifiedRecordAction Fields mraDelete = 2 Delete an existing record. mraInsert = 0 Insert a new record. mraUpdate = 1 Update an existing record."
  },
  "api/OrpheusCore.OrpheusDatabase.html": {
    "href": "api/OrpheusCore.OrpheusDatabase.html",
    "title": "Class OrpheusDatabase | Orpheus",
    "keywords": "Class OrpheusDatabase Namespace OrpheusCore Assembly OrpheusCore.dll Orpheus database. public class OrpheusDatabase : IOrpheusDatabase Inheritance Object OrpheusDatabase Implements IOrpheusDatabase Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusDatabase(IDbConnection, IOrpheusDDLHelper, ILoggerFactory) Initializes a new instance of the OrpheusDatabase class. public OrpheusDatabase(IDbConnection connection, IOrpheusDDLHelper ddlHelper, ILoggerFactory loggerFactory) Parameters connection IDbConnection The connection. ddlHelper IOrpheusDDLHelper The DDL helper. loggerFactory ILoggerFactory The logger. Properties Connected public bool Connected { get; } Property Value Boolean State of the database. Connected or not. ConnectionString public string ConnectionString { get; } Property Value String Gets the underlying IDbConnection connection string. DatabaseConnectionConfiguration public IDatabaseConnectionConfiguration DatabaseConnectionConfiguration { get; set; } Property Value IDatabaseConnectionConfiguration Database connection configuration. Exceptions System.ArgumentNullException The database connection configuration cannot be null. DbConnection public IDbConnection DbConnection { get; } Property Value IDbConnection Exposing the underlying IDbConnection instance. DDLHelper public IOrpheusDDLHelper DDLHelper { get; set; } Property Value IOrpheusDDLHelper Helps execute DDL specific commands for the underlying db engine. LastActiveTransaction public IDbTransaction LastActiveTransaction { get; } Property Value IDbTransaction Last active transaction. Logger public ILogger Logger { get; } Property Value ILogger Logger instance. LoggerFactory Gets the logger factory. public ILoggerFactory LoggerFactory { get; } Property Value ILoggerFactory The logger factory. Modules public List<IOrpheusModule> Modules { get; } Property Value List<IOrpheusModule> List of registered Orpheus modules. TypeMap public Dictionary<Type, DbType> TypeMap { get; } Property Value Dictionary<Type, DbType> Mapping dictionary of types to data types. Methods BeginTransaction() Creates a transaction object. public IDbTransaction BeginTransaction() Returns IDbTransaction Returns a transaction instance CommitTransaction(IDbTransaction) Commits a transaction. public void CommitTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction Transaction to be committed. Connect(IDatabaseConnectionConfiguration) Connects to the database engine defined in the configuration object. public void Connect(IDatabaseConnectionConfiguration databaseConnectionConfiguration) Parameters databaseConnectionConfiguration IDatabaseConnectionConfiguration Connect(String) Connects to the database engine defined in the connection string. public void Connect(string connectionString = null) Parameters connectionString String CreateCommand() Create a DbCommand. public IDbCommand CreateCommand() Returns IDbCommand A DbCommand instance. CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. public IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters definition IOrpheusModuleDefinition Module definition Returns IOrpheusModule An IOrpheusModule instance CreateModuleDefinition() Creates an OrpheusModuleDefinition. public IOrpheusModuleDefinition CreateModuleDefinition() Returns IOrpheusModuleDefinition An IOrpheusModuleDefinition instance. CreatePreparedQuery(String) Returns a prepared query with parameters created. public IDbCommand CreatePreparedQuery(string SQL) Parameters SQL String SQL for the prepared query Returns IDbCommand A DbCommand instance. CreatePreparedQuery(String, List<String>, List<Object>) Returns a prepared query with parameters created. public IDbCommand CreatePreparedQuery(string SQL, List<string> parameters, List<object> parameterValues = null) Parameters SQL String SQL for the prepared query parameters List<String> SQL parameters parameterValues List<Object> SQL parameter values Returns IDbCommand A DbCommand instance. CreateSchema(Guid, String, Double, String) Creates a schema object and sets it's database. public ISchema CreateSchema(Guid id, string description, double version, string name = null) Parameters id Guid Schema id description String Schema description version Double Schema version name String Schema name.From the supported db engines, only SQL server has support for named schemas. Returns ISchema An ISchema instance. CreateTable<T>() Creates a table and sets its database,using the type name as the table name. public IOrpheusTable<T> CreateTable<T>() Returns IOrpheusTable<T> An Orpheus table instance. Type Parameters T CreateTable<T>(IOrpheusTableOptions) Creates a table and sets its database. public IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters options IOrpheusTableOptions Table options Returns IOrpheusTable<T> An Orpheus table instance. Type Parameters T Model type for table CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates a table and sets its database. public IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters tableName String Table name keyFields List<IOrpheusTableKeyField> Table key fields Returns IOrpheusTable<T> An Orpheus table instance. Type Parameters T Model type for the table CreateTableKeyField() Creates an OrpheusTableKeyField. public IOrpheusTableKeyField CreateTableKeyField() Returns IOrpheusTableKeyField An IOrpheusTableKeyField instance. CreateTableOptions() Creates an OrpheusTableOptions. public IOrpheusTableOptions CreateTableOptions() Returns IOrpheusTableOptions An IOrpheusTableOptions instance. DDLHelperAs<T>() Casts the DDL helper to the specified type. public T DDLHelperAs<T>() Returns T An instance of T. Type Parameters T Type in which to cast the DDLHelper. Must be a descendant of IOrpheusDDLHelper. Disconnect() Disconnects from the database engine. public void Disconnect() ExecuteDDL(String) Executes a DDL command. public bool ExecuteDDL(string DDLCommand) Parameters DDLCommand String DbCommand to run. Returns Boolean True if command was successfully executed. GetTableCount(String) Returns the row count of a table. public long GetTableCount(string tableName) Parameters tableName String The table name. Returns Int64 GetTableCount<T>() Returns the row count of a table. public long GetTableCount<T>() Returns Int64 Type Parameters T The table type. IsNullableType(Type) Returns true if the type is a nullable type. public bool IsNullableType(Type type) Parameters type Type Type Returns Boolean True if type is nullable RegisterModule(IOrpheusModule) Register an Orpheus module to the database. public void RegisterModule(IOrpheusModule module) Parameters module IOrpheusModule Module to be registered RollbackTransaction(IDbTransaction) Rolls back a transaction. public void RollbackTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction Transaction to be rolled-back. SQL<T>(IDbCommand, String) Executes a db command and returns it as specific model. public List<T> SQL<T>(IDbCommand dbCommand, string tableName = null) Parameters dbCommand IDbCommand DbCommand to run. tableName String Optionally set the table name, for which the query will run. Returns List<T> A list of 'T' Type Parameters T SQL<T>(String, String) Executes a SQL statement and returns it as specific model. public List<T> SQL<T>(string SQL, string tableName = null) Parameters SQL String SQL command to execute. tableName String Table name. Returns List<T> A list of 'T' Type Parameters T"
  },
  "api/OrpheusCore.OrpheusModelHelper.html": {
    "href": "api/OrpheusCore.OrpheusModelHelper.html",
    "title": "Class OrpheusModelHelper | Orpheus",
    "keywords": "Class OrpheusModelHelper Namespace OrpheusCore Assembly OrpheusCore.dll OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. public class OrpheusModelHelper : IOrpheusModelHelper Inheritance Object OrpheusModelHelper Implements IOrpheusModelHelper Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusModelHelper(Type) Initializes a new instance of the OrpheusModelHelper class. OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. public OrpheusModelHelper(Type modelType) Parameters modelType Type Type of the model. Properties CustomFieldNameProperties public Dictionary<string, string> CustomFieldNameProperties { get; } Property Value Dictionary<String, String> Model properties that have an explicitly set field name. ForeignKeys public Dictionary<string, IForeignKey> ForeignKeys { get; } Property Value Dictionary<String, IForeignKey> Model's foreign keys. ModelProperties public PropertyInfo[] ModelProperties { get; } Property Value PropertyInfo[] Model's properties. PrimaryCompositeKeys public List<IOrpheusBaseCompositeKeyAttribute> PrimaryCompositeKeys { get; } Property Value List<IOrpheusBaseCompositeKeyAttribute> Model's composite primary keys. PrimaryKeys public Dictionary<string, IPrimaryKey> PrimaryKeys { get; } Property Value Dictionary<String, IPrimaryKey> Model's primary keys. SchemaIgnoreProperties public List<string> SchemaIgnoreProperties { get; } Property Value List<String> Model properties that are not part of the schema. SQLName public string SQLName { get; } Property Value String Model's SQLName. Defaults to the model's type name. SQLServerSchemaName public string SQLServerSchemaName { get; } Property Value String SQL server's schema name. UniqueCompositeKeys public List<IOrpheusBaseCompositeKeyAttribute> UniqueCompositeKeys { get; } Property Value List<IOrpheusBaseCompositeKeyAttribute> Model's composite unique keys. UniqueKeys public Dictionary<string, IUniqueKey> UniqueKeys { get; } Property Value Dictionary<String, IUniqueKey> Model's unique keys. Methods CreateInstance<T>() Creates an instance of the model and typecasts it to the given type. public T CreateInstance<T>() Returns T An instance of 'T' Type Parameters T Type to cast the model CreateSchemaFields(ISchemaDataObject) Creates schema fields and constraints for a model. public void CreateSchemaFields(ISchemaDataObject schemaObj) Parameters schemaObj ISchemaDataObject The schema object. GetAlterDDLCommands(ISchemaDataObject, IOrpheusDDLHelper) Creates a list of SQL ALTER commands, based on the differences between the current version of the model and the current version of the corresponding db table. public List<string> GetAlterDDLCommands(ISchemaDataObject schemaObj, IOrpheusDDLHelper ddlHelper) Parameters schemaObj ISchemaDataObject The schema object. ddlHelper IOrpheusDDLHelper The ddl helper. Returns List<String> GetFieldNameForProperty(PropertyInfo) Helper function that returns the corresponding field name for a property. public string GetFieldNameForProperty(PropertyInfo prop) Parameters prop PropertyInfo The property info. Returns String IsSchemaProperty(PropertyInfo) Helper function that returns true if the property is not actually part of the schema. public bool IsSchemaProperty(PropertyInfo property) Parameters property PropertyInfo The property. Returns Boolean IterateModelProperties(ModelProperty) Helper function to iterate through the model properties and calls the given callback, for each property. public void IterateModelProperties(ModelProperty callback) Parameters callback ModelProperty The callback method. IteratePropertyAttributes(PropertyInfo, PropertyAttribute) Helper function to iterate through the property's attributes and calls the given callback, for each attribute. public void IteratePropertyAttributes(PropertyInfo property, PropertyAttribute callback) Parameters property PropertyInfo The property. callback PropertyAttribute The callback method."
  },
  "api/OrpheusCore.OrpheusModule.html": {
    "href": "api/OrpheusCore.OrpheusModule.html",
    "title": "Class OrpheusModule | Orpheus",
    "keywords": "Class OrpheusModule Namespace OrpheusCore Assembly OrpheusCore.dll OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. public class OrpheusModule : IOrpheusModule Inheritance Object OrpheusModule Implements IOrpheusModule Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusModule(IOrpheusDatabase) Initializes a new instance of the OrpheusModule class. OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. public OrpheusModule(IOrpheusDatabase database) Parameters database IOrpheusDatabase The database. OrpheusModule(IOrpheusDatabase, IOrpheusModuleDefinition) Initializes a new instance of the OrpheusModule class. OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. public OrpheusModule(IOrpheusDatabase database, IOrpheusModuleDefinition definition) Parameters database IOrpheusDatabase The database. definition IOrpheusModuleDefinition The definition. Properties Database public IOrpheusDatabase Database { get; } Property Value IOrpheusDatabase Module's database. Definition public IOrpheusModuleDefinition Definition { get; } Property Value IOrpheusModuleDefinition Module's definition. MainTable public IOrpheusTable MainTable { get; set; } Property Value IOrpheusTable The module's main table. ReferenceTables public List<IOrpheusTable> ReferenceTables { get; } Property Value List<IOrpheusTable> List of module's reference tables. Reference tables are auxiliary or lookup tables. Tables public List<IOrpheusTable> Tables { get; } Property Value List<IOrpheusTable> List of module's tables. Methods ClearData() Clears data from all module tables. public void ClearData() GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. public IOrpheusTable<T> GetReferenceTable<T>() Returns IOrpheusTable<T> Type Parameters T Table type. GetReferenceTable<T>(Int32) Gets a reference table by index for a model public IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters index Int32 Table index. Returns IOrpheusTable<T> Type Parameters T Table type. GetReferenceTable<T>(String) Gets a reference table by name for a model public IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters tableName String Table name. Returns IOrpheusTable<T> Type Parameters T Table type. GetTable<T>() Gets a table by model. Uses the model class name as the table name. public IOrpheusTable<T> GetTable<T>() Returns IOrpheusTable<T> Type Parameters T Table type. GetTable<T>(Int32) Gets a reference table by index for a model public IOrpheusTable<T> GetTable<T>(int index) Parameters index Int32 Table index. Returns IOrpheusTable<T> Type Parameters T Table type GetTable<T>(String) Gets a table by name for a model public IOrpheusTable<T> GetTable<T>(string tableName) Parameters tableName String Table name. Returns IOrpheusTable<T> Type Parameters T Table type. Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. This applies only for the MainTable. public void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters keyValues Dictionary<String, List<Object>> The key values. logicalOperator LogicalOperator The logical operator. clearExistingData Boolean If true, it will clear all existing data. Default is true. Exceptions System.Exception If you want to load a record from the module level, you need to define the main table for the module. Load(List<Object>) Loads a module's record from the database. public void Load(List<object> keyValues = null) Parameters keyValues List<Object> The key values Exceptions System.Exception If you want to load a record from the module level, you need to define the main table for the module. Load(IDbCommand, Boolean) Loads main table data by executing a db command. public void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters dbCommand IDbCommand The IDbCommand instance. clearExistingData Boolean If true, it will clear all existing data. Default is true. Exceptions System.Exception If you want to load a record from the module level, you need to define the main table for the module. Save() Saves all changes to the database within a transaction. public void Save() Events OnAfterSave public event EventHandler<ISaveEventArguments> OnAfterSave Event Type EventHandler<ISaveEventArguments> Occurs after the transaction has been committed. OnBeforeSave public event EventHandler<ISaveEventArguments> OnBeforeSave Event Type EventHandler<ISaveEventArguments> Occurs before records are save in the database."
  },
  "api/OrpheusCore.OrpheusModuleDefinition.html": {
    "href": "api/OrpheusCore.OrpheusModuleDefinition.html",
    "title": "Class OrpheusModuleDefinition | Orpheus",
    "keywords": "Class OrpheusModuleDefinition Namespace OrpheusCore Assembly OrpheusCore.dll The OrpheusModuleDefinition can save and load a module definition. A module definition, includes relationship between the module tables and that is required for a module to be functional. IOrpheusModule public class OrpheusModuleDefinition : IOrpheusModuleDefinition Inheritance Object OrpheusModuleDefinition Implements IOrpheusModuleDefinition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusModuleDefinition() Initializes a new instance of the OrpheusModuleDefinition class. public OrpheusModuleDefinition() Properties Database [IgnoreDataMember] public IOrpheusDatabase Database { get; set; } Property Value IOrpheusDatabase Orpheus database. DetailTableOptions public List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value List<IOrpheusTableOptions> List of module's detail table options. MainTableOptions public IOrpheusTableOptions MainTableOptions { get; set; } Property Value IOrpheusTableOptions Module's main table options. Name public string Name { get; set; } Property Value String Module's name. ReferenceTableOptions public List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value List<IOrpheusTableOptions> List of module reference tables. Methods CreateTableOptions() Creates an instance of OrpheusTableOptions. public IOrpheusTableOptions CreateTableOptions() Returns IOrpheusTableOptions An IOrpheusTableOptions instance CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. public IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters tableName String The table name. modelType Type The model type. Returns IOrpheusTableOptions An IOrpheusTableOptions instance CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. public IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters modelType Type The model type. Returns IOrpheusTableOptions An IOrpheusTableOptions instance LoadFrom(Stream) Load definition from stream. public void LoadFrom(Stream stream) Parameters stream Stream The stream. LoadFrom(String) Loads definition from a file. public void LoadFrom(string fileName) Parameters fileName String The filename. LoadFromDB(String) Loads definition from the connected database. public void LoadFromDB(string moduleName) Parameters moduleName String The module name. SaveTo(Stream) Save definition to memory. public void SaveTo(Stream stream) Parameters stream Stream The stream. SaveTo(String) Save definition to a file. public void SaveTo(string fileName) Parameters fileName String The filename. SaveToDB() Save definition to the database. public void SaveToDB()"
  },
  "api/OrpheusCore.OrpheusTable-1.html": {
    "href": "api/OrpheusCore.OrpheusTable-1.html",
    "title": "Class OrpheusTable<T> | Orpheus",
    "keywords": "Class OrpheusTable<T> Namespace OrpheusCore Assembly OrpheusCore.dll Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. public class OrpheusTable<T> : IOrpheusTable<T>, IOrpheusTable Type Parameters T Model type Inheritance Object OrpheusTable<T> Implements IOrpheusTable<T> IOrpheusTable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusTable(IOrpheusDatabase, List<IOrpheusTableKeyField>, String, IOrpheusTable, List<IOrpheusTableKeyField>) Orpheus table constructor. public OrpheusTable(IOrpheusDatabase database, List<IOrpheusTableKeyField> keyFields, string tableName = null, IOrpheusTable masterTable = null, List<IOrpheusTableKeyField> masterTableKeyFields = null) Parameters database IOrpheusDatabase Orpheus database keyFields List<IOrpheusTableKeyField> Table key fields. tableName String Table name masterTable IOrpheusTable Master table (optional) masterTableKeyFields List<IOrpheusTableKeyField> Master table key fields (optional) OrpheusTable(IOrpheusTableOptions) Initializes a new instance of the OrpheusTable<T> class. public OrpheusTable(IOrpheusTableOptions options) Parameters options IOrpheusTableOptions The options. Properties Data public List<T> Data { get; } Property Value List<T> Table's currently loaded data. DetailTables public List<IOrpheusTable> DetailTables { get; } Property Value List<IOrpheusTable> Associated detail tables. KeyFields public List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value List<IOrpheusTableKeyField> Table key fields. Level public int Level { get; } Property Value Int32 Table level. MasterTable public IOrpheusTable MasterTable { get; set; } Property Value IOrpheusTable Associated master table. MasterTableKeyFields public List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value List<IOrpheusTableKeyField> Table master table's key fields. Modified public bool Modified { get; } Property Value Boolean Modified flag. Name public string Name { get; set; } Property Value String Table name. SchemaName public string SchemaName { get; } Property Value String The table's schema name. Applicable only if the db engine is SQL Server. Methods Add(T) Adds a new record to the table. public void Add(T newRecord) Parameters newRecord T New record to be added Add(List<T>) Adds a list of new records. public void Add(List<T> newRecords) Parameters newRecords List<T> New records to be added ClearData() Clears existing loaded data. public void ClearData() Delete(T) Deletes a record. public void Delete(T record) Parameters record T Record to delete Delete(List<T>) Deletes records. public void Delete(List<T> records) Parameters records List<T> Records to be deleted executeDelete(IDbTransaction) Executes deletes. protected void executeDelete(IDbTransaction transaction) Parameters transaction IDbTransaction ExecuteDeletes(IDbTransaction) Executes any delete changes that the table has. public void ExecuteDeletes(IDbTransaction transaction) Parameters transaction IDbTransaction The transaction. executeInsert(IDbTransaction) Executes inserts. protected void executeInsert(IDbTransaction transaction) Parameters transaction IDbTransaction ExecuteInserts(IDbTransaction) Executes any insert changes that the table has. public void ExecuteInserts(IDbTransaction transaction) Parameters transaction IDbTransaction The transaction. executeUpdate(IDbTransaction) Executes updates. protected void executeUpdate(IDbTransaction transaction) Parameters transaction IDbTransaction ExecuteUpdates(IDbTransaction) Executes any update changes that the table has. public void ExecuteUpdates(IDbTransaction transaction) Parameters transaction IDbTransaction The transaction. GetKeyValues() public List<KeyValuePair<string, object>> GetKeyValues() Returns List<KeyValuePair<String, Object>> Returns list of currently loaded key values. It's purpose is to be used on a master-detail schema where this will be used from the detail tables in order to load their data based on the current master record. It's highly inadvisable to be used outside this scope. Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. public void Load(Dictionary<string, List<object>> keyValues = null, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters keyValues Dictionary<String, List<Object>> The key values. logicalOperator LogicalOperator The logical operator. clearExistingData Boolean If true, it will clear all existing data. Default is true. Load(List<Object>, Boolean) Loads records from the DB to the table. public void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters keyValues List<Object> The key values. clearExistingData Boolean If true, it will clear all existing data. Default is true. Exceptions System.Data.InvalidExpressionException When an Orpheus table has more than one key fields, you cannot use the 'simple' load. Values for each field much be determined. Load(IDbCommand, Boolean) Loads table data by executing a db command. public void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters dbCommand IDbCommand The IDbCommand instance. clearExistingData Boolean If true, it will clear all existing data. Default is true. Load(String, Boolean) Loads table data by executing a SQL command. public void Load(string SQL, bool clearExistingData = true) Parameters SQL String SQL command to be executed clearExistingData Boolean If true, it will clear all existing data. Default is true. Save(IDbTransaction, Boolean) Save changes to the database. public void Save(IDbTransaction dbTransaction = null, bool commitTransaction = true) Parameters dbTransaction IDbTransaction Transaction in which the commands will be executed commitTransaction Boolean Commit transaction after save. Update(T) Updates an existing record. public void Update(T record) Parameters record T Record to be updated Update(List<T>) Updates existing records. public void Update(List<T> records) Parameters records List<T> Records to be updated Events OnAfterModify public event EventHandler<IModifyRecordEventArguments<T>> OnAfterModify Event Type EventHandler<IModifyRecordEventArguments<T>> Occurs after a table modifies a record. It is fired on any Add,Update,Delete OnAfterSave public event EventHandler<ISaveEventArguments> OnAfterSave Event Type EventHandler<ISaveEventArguments> Occurs after the transaction has been committed. OnBeforeModify public event EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Event Type EventHandler<IModifyRecordEventArguments<T>> Occurs before a table modifies a record. It is fired on any Add,Update,Delete OnBeforeSave public event EventHandler<ISaveEventArguments> OnBeforeSave Event Type EventHandler<ISaveEventArguments> Occurs before records are save in the database."
  },
  "api/OrpheusCore.OrpheusTableKeyField.html": {
    "href": "api/OrpheusCore.OrpheusTableKeyField.html",
    "title": "Class OrpheusTableKeyField | Orpheus",
    "keywords": "Class OrpheusTableKeyField Namespace OrpheusCore Assembly OrpheusCore.dll public class OrpheusTableKeyField : IOrpheusTableKeyField Inheritance Object OrpheusTableKeyField Implements IOrpheusTableKeyField Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties IsAutoGenerated public bool IsAutoGenerated { get; set; } Property Value Boolean If set to true and the type is System.Guid then with every new insert, a value will be auto generated. IsDBGenerated public bool IsDBGenerated { get; set; } Property Value Boolean True if the underlying db engine is going to generate the value for the key. KeySQLUpdate public Func<string> KeySQLUpdate { get; set; } Property Value Func<String> Function that returns a SQL string to used to select the new key value after an insert. Name public string Name { get; set; } Property Value String Name of the field that is the table key."
  },
  "api/OrpheusCore.OrpheusTableOptions.html": {
    "href": "api/OrpheusCore.OrpheusTableOptions.html",
    "title": "Class OrpheusTableOptions | Orpheus",
    "keywords": "Class OrpheusTableOptions Namespace OrpheusCore Assembly OrpheusCore.dll Represents IOrpheusTable options, which can be used to instantiate a table. public class OrpheusTableOptions : IOrpheusTableOptions Inheritance Object OrpheusTableOptions Implements IOrpheusTableOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusTableOptions() Initializes a new instance of the OrpheusTableOptions class. public OrpheusTableOptions() Properties Database public IOrpheusDatabase Database { get; set; } Property Value IOrpheusDatabase Database the table belongs to. KeyFields public List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value List<IOrpheusTableKeyField> List of the table's key fields. IOrpheusTableKeyField MasterTable public IOrpheusTable MasterTable { get; set; } Property Value IOrpheusTable Optional. A master table that this table is associated with. MasterTableKeyFields public List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value List<IOrpheusTableKeyField> List of the master table's keys (if master table is defined). These are being used to support a master-detail relationship. MasterTableName public string MasterTableName { get; set; } Property Value String Optional. A master table that this table is associated with. ModelType [IgnoreDataMember] public Type ModelType { get; set; } Property Value Type Table's model type. TableName public string TableName { get; set; } Property Value String Table's name. Methods AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. public void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters name String Field name isAutoGenerated Boolean Auto generate flag isDBGenerated Boolean DB generated flag keySQLUpdate Func<String> Function to return a custom SQL when updating the field value AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field public void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters name String Field name isAutoGenerated Boolean Auto generate flag isDBGenerated Boolean DB generated flag keySQLUpdate Func<String> Function to return a custom SQL when updating the field value"
  },
  "api/OrpheusCore.PropertyAttribute.html": {
    "href": "api/OrpheusCore.PropertyAttribute.html",
    "title": "Delegate PropertyAttribute | Orpheus",
    "keywords": "Delegate PropertyAttribute Namespace OrpheusCore Assembly OrpheusCore.dll Helper delegate, to be called when iterating through property's attributes. public delegate void PropertyAttribute(Attribute attribute); Parameters attribute Attribute"
  },
  "api/OrpheusCore.SchemaBuilder.ForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.ForeignKeySchemaConstraint.html",
    "title": "Class ForeignKeySchemaConstraint | Orpheus",
    "keywords": "Class ForeignKeySchemaConstraint Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll A foreign key constraint. public class ForeignKeySchemaConstraint : PrimaryKeySchemaConstraint, IPrimaryKeySchemaConstraint, IForeignKeySchemaConstraint, ISchemaConstraint Inheritance Object PrimaryKeySchemaConstraint ForeignKeySchemaConstraint Implements IPrimaryKeySchemaConstraint IForeignKeySchemaConstraint ISchemaConstraint Inherited Members PrimaryKeySchemaConstraint.Fields PrimaryKeySchemaConstraint.Name PrimaryKeySchemaConstraint.Sort PrimaryKeySchemaConstraint.SchemaObject PrimaryKeySchemaConstraint.Action PrimaryKeySchemaConstraint.ConstraintSQLCommand Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ForeignKeySchemaConstraint(ISchemaDataObject) Creates a foreign key constraint. public ForeignKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters schemaObject ISchemaDataObject Schema object where the constraint belong Properties ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. public List<string> ForeignKeyFields { get; set; } Property Value List<String> List of key fields ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. public string ForeignKeySchemaObject { get; set; } Property Value String Constraint's key OnDeleteCascade Cascade on delete. public bool OnDeleteCascade { get; set; } Property Value Boolean True if cascade on delete is on OnUpdateCascade Cascade on update. public bool OnUpdateCascade { get; set; } Property Value Boolean True if cascade on update is on Methods SQL() Returns the SQL definition of the key. public override string SQL() Returns String Constraint's SQL"
  },
  "api/OrpheusCore.SchemaBuilder.PrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.PrimaryKeySchemaConstraint.html",
    "title": "Class PrimaryKeySchemaConstraint | Orpheus",
    "keywords": "Class PrimaryKeySchemaConstraint Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll A primary key constraint. public class PrimaryKeySchemaConstraint : IPrimaryKeySchemaConstraint, ISchemaConstraint Inheritance Object PrimaryKeySchemaConstraint Implements IPrimaryKeySchemaConstraint ISchemaConstraint Derived ForeignKeySchemaConstraint UniqueKeySchemaConstraint Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PrimaryKeySchemaConstraint(ISchemaDataObject) Creates a primary key constraint. public PrimaryKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters schemaObject ISchemaDataObject Schema object where the constraint belong Properties Action Returns true if the constraint needs to drop. public DDLAction Action { get; set; } Property Value DDLAction Constraint's DDLAction ConstraintSQLCommand The constraint SQL command. UNIQUE, PRIMARY KEY etc. public string ConstraintSQLCommand { get; protected set; } Property Value String Fields Fields which the constraint will be applied. public List<string> Fields { get; set; } Property Value List<String> Fields affected from the constraint Name Constraint name. public string Name { get; set; } Property Value String Constraint name SchemaObject Schema object were this schema constraint exists public ISchemaDataObject SchemaObject { get; } Property Value ISchemaDataObject The schema object where the constraint exists Sort Key's sort direction. public SchemaSort Sort { get; set; } Property Value SchemaSort Schema sort type Methods SQL() Returns the SQL definition of the key. public virtual string SQL() Returns String Constraint's SQL"
  },
  "api/OrpheusCore.SchemaBuilder.Schema.html": {
    "href": "api/OrpheusCore.SchemaBuilder.Schema.html",
    "title": "Class Schema | Orpheus",
    "keywords": "Class Schema Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Represents an Orpheus Schema. public class Schema : ISchema Inheritance Object Schema Implements ISchema Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors Schema() Initializes a new instance of the Schema class. public Schema() Schema(IOrpheusDatabase, String, Double, Guid) Initializes a new instance of the Schema class. public Schema(IOrpheusDatabase db, string description, double version, Guid id) Parameters db IOrpheusDatabase The database. description String The description. version Double The version. id Guid The identifier. Schema(IOrpheusDatabase, String, Double, Guid, String) Initializes a new instance of the Schema class. public Schema(IOrpheusDatabase db, string description, double version, Guid id, string name = null) Parameters db IOrpheusDatabase The database. description String The description. version Double The version. id Guid The identifier. name String Schema name. If the DB engine is SQL server, and the name value is set, it will be used as SCHEMA name. Properties DB Orpheus database. public IOrpheusDatabase DB { get; } Property Value IOrpheusDatabase Instance of the Orpheus Database Description Schema description. public string Description { get; protected set; } Property Value String Schema description Id Schema Id. public Guid Id { get; } Property Value Guid Schema unique id Name Schema name. public string Name { get; protected set; } Property Value String Schema description ReferencedSchemas public List<ISchema> ReferencedSchemas { get; set; } Property Value List<ISchema> List of reference schemas SchemaInfoTable public string SchemaInfoTable { get; } Property Value String Orpheus schema info table. SchemaModulesTable Orpheus module definition table. public string SchemaModulesTable { get; } Property Value String Table name for the Orpheus schema modules table SchemaObjects public List<ISchemaObject> SchemaObjects { get; set; } Property Value List<ISchemaObject> List of schema objects. ISchemaObject SchemaObjectsTable public string SchemaObjectsTable { get; } Property Value String Orpheus schema objects table. Version Schema version. public double Version { get; protected set; } Property Value Double Schema version Methods AddSchemaObject(ISchemaObject) Adds a schema object to the list. public ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Returns ISchemaObject The schema object that was added AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. public ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters model Object Model will be used to auto-generate fields, primary keys etc, for the schema object dependencies List<ISchemaObject> List of schema objects, that this objects depends upon Returns ISchemaTable AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. public ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters tableName String Table name dependencies List<ISchemaObject> List of schema objects, that this objects depends upon model Object Model will be used to auto-generate fields, primary keys etc, for the schema object Returns ISchemaTable AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. public ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters modelType Type Model type will be used to auto-generate fields, primary keys etc, for the schema object dependencies List<ISchemaObject> List of schema objects, that this objects depends upon Returns ISchemaTable AddSchemaTable<T>(List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. public ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class Parameters dependencies List<ISchemaObject> The dependencies. Returns ISchemaTable Type Parameters T Schema table type AddSchemaTable<T, D>() Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. public ISchemaTable AddSchemaTable<T, D>() Returns ISchemaTable Type Parameters T Model type D Dependency model type CreateSchemaJoinDefinition() Creates a join schema definition. public ISchemaJoinDefinition CreateSchemaJoinDefinition() Returns ISchemaJoinDefinition CreateSchemaObject() Creates a schema object. public ISchemaObject CreateSchemaObject() Returns ISchemaObject CreateSchemaTable() Creates a table schema object. public ISchemaTable CreateSchemaTable() Returns ISchemaTable CreateSchemaView() Creates a view schema object. public ISchemaView CreateSchemaView() Returns ISchemaView CreateSchemaViewTable() Creates a view table schema object. public ISchemaViewTable CreateSchemaViewTable() Returns ISchemaViewTable Drop() Drops schema. Removes all schema objects from the database. public void Drop() Execute() Iterates through registered schema objects and executes them. public void Execute() LoadFromFile(String) Loads schema definition from a file. public void LoadFromFile(string fileName) Parameters fileName String The filename. RegisterSchema() Registers schema information, in the schema information table. public void RegisterSchema() RemoveSchemaObject(ISchemaObject) Removes a schema object from the schema list. public void RemoveSchemaObject(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject SaveToFile(String) Saves schema definition to a file. If the file exists it will overwrite it. public void SaveToFile(string fileName) Parameters fileName String The filename. SchemaObjectExists(ISchemaObject) Returns the guid of the schema object it is created. public Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Schema object to be checked if it exists Returns Guid The schema object unique id"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaDataObject.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaDataObject.html",
    "title": "Class SchemaDataObject | Orpheus",
    "keywords": "Class SchemaDataObject Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Base schema data object. public class SchemaDataObject : SchemaObject, ISchemaDataObject, ISchemaObject Inheritance Object SchemaObject SchemaDataObject Implements ISchemaDataObject ISchemaObject Derived SchemaObjectTable SchemaObjectView Inherited Members SchemaObject.logger SchemaObject._sqlName SchemaObject.formatLoggerMessage(String) SchemaObject.createDDLString() SchemaObject.getType() SchemaObject.formatSQLName() SchemaObject.SQLName SchemaObject.RawDDL SchemaObject.Schema SchemaObject.Action SchemaObject.UniqueKey SchemaObject.SchemaObjectsThatIDepend SchemaObject.SchemaObjectsThatDependOnMe SchemaObject.GetSchemaType() SchemaObject.IsCreated SchemaObject.AliasName SchemaObject.GetDDLString() SchemaObject.AddDependency(ISchemaObject) SchemaObject.AddDependency(Type) SchemaObject.AddDependency<T>() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SchemaDataObject() Initializes a new instance of the SchemaDataObject class. public SchemaDataObject() Fields modelHelper Schema model helper. protected OrpheusModelHelper modelHelper Field Value OrpheusModelHelper seedDataTable Table that holds the initial seed data for the schema. protected IOrpheusTable seedDataTable Field Value IOrpheusTable Properties Constraints The list of constraints of the schema object. public List<ISchemaConstraint> Constraints { get; set; } Property Value List<ISchemaConstraint> DB Database that the schema object belongs to. Taken from the ISchema property. public IOrpheusDatabase DB { get; } Property Value IOrpheusDatabase Fields The list of fields of the schema object. public List<ISchemaField> Fields { get; set; } Property Value List<ISchemaField> Methods AddField(String, String, Boolean, String, String, String) Creates and adds a field to the field list. public ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters name String Field name dataType String Field data type nullable Boolean Nullable defaultValue String Field default value size String Field size alias String Field alias Returns ISchemaField AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds the foreign key constraint. public IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateCascade = true) Parameters name String The name. fields List<String> The fields. foreignKeySchemaObject String The foreign key schema object. foreignKeySchemaFields List<String> The foreign key schema fields. onCascadeDelete Boolean if set to true [on cascade delete]. onUpdateCascade Boolean if set to true [on update cascade]. Returns IForeignKeySchemaConstraint AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. public IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters name String Constraint name fields List<String> Constraint fields sort SchemaSort Constraint sort Returns IPrimaryKeySchemaConstraint AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. public IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters name String Constraint name fields List<String> Constraint fields Returns IUniqueKeySchemaConstraint An IUniqueKeySchemaConstraint applyConstraints(IDbCommand) Applies schema constraints. protected virtual void applyConstraints(IDbCommand cmd) Parameters cmd IDbCommand canExecuteSchema() Returns true if the schema can be executed. protected override bool canExecuteSchema() Returns Boolean CreateFieldsFromModel(Object) Creates fields from a given model. Supports OrpheusAttributes attributes Instance of model public void CreateFieldsFromModel(object model) Parameters model Object CreateFieldsFromModel(Type) Creates fields from a given model. Supports OrpheusAttributes attributes Model type public void CreateFieldsFromModel(Type modelType) Parameters modelType Type CreateFieldsFromModel<T>() Creates fields from a given model. Supports OrpheusAttributes attributes public void CreateFieldsFromModel<T>() Type Parameters T Model type Drop() Drops the schema from the database. public override void Drop() Execute() Creates the schema object in the database. public override void Execute() getConstraintsDDL() Returns the schema constraints SQL. protected string getConstraintsDDL() Returns String GetConstraintsDDL() Generate the schema's constraints DDL string. public List<string> GetConstraintsDDL() Returns List<String> Returns the DDL string ready to be executed. GetData<T>() Returns the seed data for the table if defined. public List<T> GetData<T>() Returns List<T> Schema object's data Type Parameters T Schema object model type registerSchema(IDbTransaction) Registers an Orpheus schema. protected override void registerSchema(IDbTransaction transaction = null) Parameters transaction IDbTransaction seedData(IDbCommand) Inserts data to the DB engine, if the schema is a Table. protected virtual void seedData(IDbCommand cmd) Parameters cmd IDbCommand SetData<T>(List<T>) Optional data to initialize a schema object. Practically applicable only to a table. public void SetData<T>(List<T> data) Parameters data List<T> The data. Type Parameters T The data type. unRegisterSchema(IDbTransaction) Unregisters an Orpheus schema. protected override void unRegisterSchema(IDbTransaction transaction = null) Parameters transaction IDbTransaction"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaField.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaField.html",
    "title": "Class SchemaField | Orpheus",
    "keywords": "Class SchemaField Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Represents a schema field. public class SchemaField : ISchemaField Inheritance Object SchemaField Implements ISchemaField Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SchemaField(ISchemaDataObject) Creates a schema field. public SchemaField(ISchemaDataObject schemaObject) Parameters schemaObject ISchemaDataObject Schema where the field belongs Properties Alias Field alias. public string Alias { get; set; } Property Value String Field alias DataType Field data type. public string DataType { get; set; } Property Value String Field data type DefaultValue Field's default value. public string DefaultValue { get; set; } Property Value String Field's default value FullFieldName Gets the full field name. public string FullFieldName { get; } Property Value String Name Field name. public string Name { get; set; } Property Value String Field name Nullable True if field accepts null values. public bool Nullable { get; set; } Property Value Boolean True if field accepts null values SchemaObject Schema object where this schema field exists public ISchemaObject SchemaObject { get; } Property Value ISchemaObject Schema object where the field exists Size Field size (if applicable). public string Size { get; set; } Property Value String Field size TableName Table where the field belongs. public string TableName { get; set; } Property Value String Methods SQL() Returns SQL definition for the field. public string SQL() Returns String SQL definition for the field"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaJoinDefinition.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaJoinDefinition.html",
    "title": "Class SchemaJoinDefinition | Orpheus",
    "keywords": "Class SchemaJoinDefinition Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Represents a schema join definition, which can be used by ISchemaObject when a schema is created. public class SchemaJoinDefinition : ISchemaJoinDefinition Inheritance Object SchemaJoinDefinition Implements ISchemaJoinDefinition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties JoinKeyField Key field name of the join object. public string JoinKeyField { get; set; } Property Value String Key field name of the join object JoinOperator Join operator SchemaJoinOperator. public SchemaJoinOperator JoinOperator { get; set; } Property Value SchemaJoinOperator Join operator JoinTableName public string JoinTableName { get; set; } Property Value String Table name to perform the join. JoinType Type of join SchemaJoinType. public SchemaJoinType JoinType { get; set; } Property Value SchemaJoinType Type of join KeyField Key field name of the main object. public string KeyField { get; set; } Property Value String Key field name of the main object"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObject.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObject.html",
    "title": "Class SchemaObject | Orpheus",
    "keywords": "Class SchemaObject Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Base schema object. public class SchemaObject : ISchemaObject Inheritance Object SchemaObject Implements ISchemaObject Derived SchemaDataObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SchemaObject() Initializes a new instance of the SchemaObject class. public SchemaObject() Fields _sqlName protected string _sqlName Field Value String logger protected ILogger logger Field Value ILogger Properties Action public DDLAction Action { get; set; } Property Value DDLAction Defines the behavior of execute. DDLAction AliasName public string AliasName { get; set; } Property Value String The schema object alias name. IsCreated public bool IsCreated { get; protected set; } Property Value Boolean Flag to indicate if the schema object has actually been created in the database. RawDDL public string RawDDL { get; set; } Property Value String Overrides any schema object configuration and executes RawDLL contents. Schema public ISchema Schema { get; set; } Property Value ISchema The Schema where the schema object belongs to. SchemaObjectsThatDependOnMe public List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value List<ISchemaObject> A list of other schema objects that depend on this instance. SchemaObjectsThatIDepend public List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value List<ISchemaObject> A list of other schema objects that this instance depends upon. Any schema object in this list will be executed before, to make sure that on the time of creation they will be available/created. SQLName public string SQLName { get; set; } Property Value String The SQL name for the schema. This will be used to actually create the schema object in the database. UniqueKey public Guid UniqueKey { get; set; } Property Value Guid An Id to uniquely identify this schema object. Methods AddDependency(ISchemaObject) Adds a dependency to a schema object. public void AddDependency(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject The schema object. AddDependency(Type) Adds a dependency to a schema object based on the model type. public void AddDependency(Type modelType) Parameters modelType Type The model type. Exceptions System.Exception Model [model name] has been registered in more than schema's AddDependency<T>() Adds a dependency to a schema object based on the model type. public void AddDependency<T>() where T : class Type Parameters T canExecuteSchema() Returns true if the schema can be executed. protected virtual bool canExecuteSchema() Returns Boolean createDDLString() Creates the DDL string for the schema object. protected virtual List<string> createDDLString() Returns List<String> Drop() Drops the schema object. public virtual void Drop() Execute() Creates schema object. public virtual void Execute() formatLoggerMessage(String) Formats the logger's message. protected string formatLoggerMessage(string message) Parameters message String Returns String formatSQLName() Returns formatted the SQL name for the object, including schema name and/or alias name, if defined. protected virtual string formatSQLName() Returns String GetDDLString() Generate the schema DDL string. public List<string> GetDDLString() Returns List<String> Returns the DDL string ready to be executed. GetSchemaType() Schema Type public SchemaObjectType GetSchemaType() Returns SchemaObjectType Returns SchemaObjectType getType() Returns the schema type. protected virtual SchemaObjectType getType() Returns SchemaObjectType Returns SchemaObjectType registerSchema(IDbTransaction) Registers an Orpheus schema. protected virtual void registerSchema(IDbTransaction transaction) Parameters transaction IDbTransaction unRegisterSchema(IDbTransaction) Unregisters an Orpheus schema. protected virtual void unRegisterSchema(IDbTransaction transaction) Parameters transaction IDbTransaction"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectTable.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectTable.html",
    "title": "Class SchemaObjectTable | Orpheus",
    "keywords": "Class SchemaObjectTable Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Derived class to specifically handle TABLE type schema objects. public class SchemaObjectTable : SchemaDataObject, ISchemaTable, ISchemaDataObject, ISchemaObject Inheritance Object SchemaObject SchemaDataObject SchemaObjectTable Implements ISchemaTable ISchemaDataObject ISchemaObject Derived SchemaObjectViewTable Inherited Members SchemaDataObject.modelHelper SchemaDataObject.seedDataTable SchemaDataObject.getConstraintsDDL() SchemaDataObject.registerSchema(IDbTransaction) SchemaDataObject.unRegisterSchema(IDbTransaction) SchemaDataObject.canExecuteSchema() SchemaDataObject.DB SchemaDataObject.Fields SchemaDataObject.Constraints SchemaDataObject.CreateFieldsFromModel(Object) SchemaDataObject.CreateFieldsFromModel<T>() SchemaDataObject.CreateFieldsFromModel(Type) SchemaDataObject.AddField(String, String, Boolean, String, String, String) SchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) SchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) SchemaDataObject.AddUniqueKeyConstraint(String, List<String>) SchemaDataObject.SetData<T>(List<T>) SchemaDataObject.GetData<T>() SchemaDataObject.GetConstraintsDDL() SchemaDataObject.Execute() SchemaDataObject.Drop() SchemaObject.logger SchemaObject._sqlName SchemaObject.formatLoggerMessage(String) SchemaObject.formatSQLName() SchemaObject.SQLName SchemaObject.RawDDL SchemaObject.Schema SchemaObject.Action SchemaObject.UniqueKey SchemaObject.SchemaObjectsThatIDepend SchemaObject.SchemaObjectsThatDependOnMe SchemaObject.GetSchemaType() SchemaObject.IsCreated SchemaObject.AliasName SchemaObject.GetDDLString() SchemaObject.AddDependency(ISchemaObject) SchemaObject.AddDependency(Type) SchemaObject.AddDependency<T>() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SchemaObjectTable() Initializes a new instance of the SchemaObjectTable class. public SchemaObjectTable() Properties JoinDefinition public ISchemaJoinDefinition JoinDefinition { get; set; } Property Value ISchemaJoinDefinition Table's Join definition. How and if this table is connected to other tables. Methods applyConstraints(IDbCommand) Applies schema's constraints. protected override void applyConstraints(IDbCommand cmd) Parameters cmd IDbCommand createDDLString() Creates the DDL string for the schema object. protected override List<string> createDDLString() Returns List<String> getType() Gets the SchemaObjectType. protected override SchemaObjectType getType() Returns SchemaObjectType seedData(IDbCommand) Seeds the table with initial data. protected override void seedData(IDbCommand cmd) Parameters cmd IDbCommand"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectView.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectView.html",
    "title": "Class SchemaObjectView | Orpheus",
    "keywords": "Class SchemaObjectView Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Derived class to specifically handle VIEW type schema objects. public class SchemaObjectView : SchemaDataObject, ISchemaView, ISchemaDataObject, ISchemaObject Inheritance Object SchemaObject SchemaDataObject SchemaObjectView Implements ISchemaView ISchemaDataObject ISchemaObject Inherited Members SchemaDataObject.modelHelper SchemaDataObject.seedDataTable SchemaDataObject.getConstraintsDDL() SchemaDataObject.applyConstraints(IDbCommand) SchemaDataObject.seedData(IDbCommand) SchemaDataObject.registerSchema(IDbTransaction) SchemaDataObject.unRegisterSchema(IDbTransaction) SchemaDataObject.canExecuteSchema() SchemaDataObject.DB SchemaDataObject.Fields SchemaDataObject.Constraints SchemaDataObject.CreateFieldsFromModel(Object) SchemaDataObject.CreateFieldsFromModel<T>() SchemaDataObject.CreateFieldsFromModel(Type) SchemaDataObject.AddField(String, String, Boolean, String, String, String) SchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) SchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) SchemaDataObject.AddUniqueKeyConstraint(String, List<String>) SchemaDataObject.SetData<T>(List<T>) SchemaDataObject.GetData<T>() SchemaDataObject.GetConstraintsDDL() SchemaDataObject.Execute() SchemaDataObject.Drop() SchemaObject.logger SchemaObject._sqlName SchemaObject.formatLoggerMessage(String) SchemaObject.formatSQLName() SchemaObject.SQLName SchemaObject.RawDDL SchemaObject.Schema SchemaObject.Action SchemaObject.UniqueKey SchemaObject.SchemaObjectsThatIDepend SchemaObject.SchemaObjectsThatDependOnMe SchemaObject.GetSchemaType() SchemaObject.IsCreated SchemaObject.AliasName SchemaObject.GetDDLString() SchemaObject.AddDependency(ISchemaObject) SchemaObject.AddDependency(Type) SchemaObject.AddDependency<T>() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SchemaObjectView() Initializes a new instance of the SchemaObjectView class. public SchemaObjectView() Properties JoinDefinition public ISchemaJoinDefinition JoinDefinition { get; set; } Property Value ISchemaJoinDefinition View's Join definition. How and if this table is connected to other tables. JoinSchemaObjects public List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value List<ISchemaTable> List of schema table to be included in the view. TableName public string TableName { get; set; } Property Value String The main table around which the view will be built. WithSchemaBinding public bool WithSchemaBinding { get; set; } Property Value Boolean SQL server specific option, to create views with schema binding, in order to be able to create indexes on the view itself. Methods createDDLString() Creates the DDL string for the schema object. protected override List<string> createDDLString() Returns List<String> FormattedTableName() Returns the main table name, SQL formatted, with a schema name, if the underlying db engine supports it, and with the table alias, if defined. public string FormattedTableName() Returns String getType() Gets the SchemaObjectType. protected override SchemaObjectType getType() Returns SchemaObjectType"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectViewTable.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectViewTable.html",
    "title": "Class SchemaObjectViewTable | Orpheus",
    "keywords": "Class SchemaObjectViewTable Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll Derived class to specifically handle data tables that are part of a view. public class SchemaObjectViewTable : SchemaObjectTable, ISchemaViewTable, ISchemaTable, ISchemaDataObject, ISchemaObject Inheritance Object SchemaObject SchemaDataObject SchemaObjectTable SchemaObjectViewTable Implements ISchemaViewTable ISchemaTable ISchemaDataObject ISchemaObject Inherited Members SchemaObjectTable.getType() SchemaObjectTable.createDDLString() SchemaObjectTable.applyConstraints(IDbCommand) SchemaObjectTable.seedData(IDbCommand) SchemaObjectTable.JoinDefinition SchemaDataObject.modelHelper SchemaDataObject.seedDataTable SchemaDataObject.getConstraintsDDL() SchemaDataObject.registerSchema(IDbTransaction) SchemaDataObject.unRegisterSchema(IDbTransaction) SchemaDataObject.canExecuteSchema() SchemaDataObject.DB SchemaDataObject.Fields SchemaDataObject.Constraints SchemaDataObject.CreateFieldsFromModel(Object) SchemaDataObject.CreateFieldsFromModel<T>() SchemaDataObject.CreateFieldsFromModel(Type) SchemaDataObject.AddField(String, String, Boolean, String, String, String) SchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) SchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) SchemaDataObject.AddUniqueKeyConstraint(String, List<String>) SchemaDataObject.SetData<T>(List<T>) SchemaDataObject.GetData<T>() SchemaDataObject.GetConstraintsDDL() SchemaDataObject.Execute() SchemaDataObject.Drop() SchemaObject.logger SchemaObject._sqlName SchemaObject.formatLoggerMessage(String) SchemaObject.SQLName SchemaObject.RawDDL SchemaObject.Schema SchemaObject.Action SchemaObject.UniqueKey SchemaObject.SchemaObjectsThatIDepend SchemaObject.SchemaObjectsThatDependOnMe SchemaObject.GetSchemaType() SchemaObject.IsCreated SchemaObject.AliasName SchemaObject.GetDDLString() SchemaObject.AddDependency(ISchemaObject) SchemaObject.AddDependency(Type) SchemaObject.AddDependency<T>() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties SchemaName public string SchemaName { get; set; } Property Value String Override for the schema name. Methods formatSQLName() Overriding the default behavior, for view objects. protected override string formatSQLName() Returns String"
  },
  "api/OrpheusCore.SchemaBuilder.UniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.UniqueKeySchemaConstraint.html",
    "title": "Class UniqueKeySchemaConstraint | Orpheus",
    "keywords": "Class UniqueKeySchemaConstraint Namespace OrpheusCore.SchemaBuilder Assembly OrpheusCore.dll A unique key constraint. public class UniqueKeySchemaConstraint : PrimaryKeySchemaConstraint, IPrimaryKeySchemaConstraint, IUniqueKeySchemaConstraint, ISchemaConstraint Inheritance Object PrimaryKeySchemaConstraint UniqueKeySchemaConstraint Implements IPrimaryKeySchemaConstraint IUniqueKeySchemaConstraint ISchemaConstraint Inherited Members PrimaryKeySchemaConstraint.Fields PrimaryKeySchemaConstraint.Name PrimaryKeySchemaConstraint.Sort PrimaryKeySchemaConstraint.SchemaObject PrimaryKeySchemaConstraint.Action PrimaryKeySchemaConstraint.ConstraintSQLCommand Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors UniqueKeySchemaConstraint(ISchemaDataObject) Creates a unique key constraint. public UniqueKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters schemaObject ISchemaDataObject Schema object where the constraint belong Methods SQL() Returns the SQL definition of the key. public override string SQL() Returns String Constraint's SQL"
  },
  "api/OrpheusCore.SchemaBuilder.html": {
    "href": "api/OrpheusCore.SchemaBuilder.html",
    "title": "Namespace OrpheusCore.SchemaBuilder | Orpheus",
    "keywords": "Namespace OrpheusCore.SchemaBuilder Classes ForeignKeySchemaConstraint A foreign key constraint. PrimaryKeySchemaConstraint A primary key constraint. Schema Represents an Orpheus Schema. SchemaDataObject Base schema data object. SchemaField Represents a schema field. SchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. SchemaObject Base schema object. SchemaObjectTable Derived class to specifically handle TABLE type schema objects. SchemaObjectView Derived class to specifically handle VIEW type schema objects. SchemaObjectViewTable Derived class to specifically handle data tables that are part of a view. UniqueKeySchemaConstraint A unique key constraint."
  },
  "api/OrpheusCore.ServiceManager.html": {
    "href": "api/OrpheusCore.ServiceManager.html",
    "title": "Class ServiceManager | Orpheus",
    "keywords": "Class ServiceManager Namespace OrpheusCore Assembly OrpheusCore.dll Class to register internal services needed by Orpheus public static class ServiceManager Inheritance Object ServiceManager Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties LoggerFactory Gets the logger factory. public static ILoggerFactory LoggerFactory { get; } Property Value ILoggerFactory The logger factory. Methods AddOrpheusServices(IServiceCollection) Register Orpheus services public static IServiceCollection AddOrpheusServices(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection Resolve<T>() Resolve an interface to a concrete implementation. public static T Resolve<T>() Returns T Type Parameters T Resolve<T>(Object[]) Resolve an interface to a concrete implementation, with constructor parameter support. public static T Resolve<T>(object[] constructorParameters) Parameters constructorParameters Object[] Returns T Type Parameters T"
  },
  "api/OrpheusCore.html": {
    "href": "api/OrpheusCore.html",
    "title": "Namespace OrpheusCore | Orpheus",
    "keywords": "Namespace OrpheusCore Classes OrpheusDatabase Orpheus database. OrpheusModelHelper OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. OrpheusModule OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. OrpheusModuleDefinition The OrpheusModuleDefinition can save and load a module definition. A module definition, includes relationship between the module tables and that is required for a module to be functional. IOrpheusModule OrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. OrpheusTableKeyField OrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. ServiceManager Class to register internal services needed by Orpheus Enums ModifiedRecordAction Modified record action. Delegates ModelProperty Helper delegate, to be called when iterating through model's properties. PropertyAttribute Helper delegate, to be called when iterating through property's attributes."
  },
  "api/OrpheusInterfaces.Configuration.EncyrptConnection.html": {
    "href": "api/OrpheusInterfaces.Configuration.EncyrptConnection.html",
    "title": "Enum EncyrptConnection | Orpheus",
    "keywords": "Enum EncyrptConnection Namespace OrpheusInterfaces.Configuration Assembly OrpheusInterfaces.dll Database encryption connection mode public enum EncyrptConnection Fields [JsonPropertyName(\"mandatory\")] ecMandatory = 1 Enforce encrypting the connection. [JsonPropertyName(\"optional\")] ecOptional = 0 Optionally encrypt the connection. [JsonPropertyName(\"strict\")] ecStrict = 2 Enables and requires TDS 8.0, TLS encryption to the server. If the server doesn't support TDS 8.0, TLS encryption, the connection will fail."
  },
  "api/OrpheusInterfaces.Configuration.IDatabaseConnectionConfiguration.html": {
    "href": "api/OrpheusInterfaces.Configuration.IDatabaseConnectionConfiguration.html",
    "title": "Interface IDatabaseConnectionConfiguration | Orpheus",
    "keywords": "Interface IDatabaseConnectionConfiguration Namespace OrpheusInterfaces.Configuration Assembly OrpheusInterfaces.dll Database connection configuration. public interface IDatabaseConnectionConfiguration Properties ConfigurationName string ConfigurationName { get; set; } Property Value String Database configuration name. DatabaseName string DatabaseName { get; set; } Property Value String The database name. EncyrptConnection Set if the connection will be encrytped or not. EncyrptConnection EncyrptConnection { get; set; } Property Value EncyrptConnection Password string Password { get; set; } Property Value String Password. Server string Server { get; set; } Property Value String Server name or IP address. ServicePassword string ServicePassword { get; set; } Property Value String Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. The ServicePassword is the one that will be used for that connection. ServiceUserName string ServiceUserName { get; set; } Property Value String Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. The ServiceUserName is the one that will be used for that connection. TrustServerCertificate True to trust the server certificate. Default is true. bool TrustServerCertificate { get; set; } Property Value Boolean UseIntegratedSecurity bool UseIntegratedSecurity { get; set; } Property Value Boolean SQL Server specific. UseIntegratedSecurityForServiceConnection bool UseIntegratedSecurityForServiceConnection { get; set; } Property Value Boolean Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. This boolean sets this second connection, integrated security setting. UserName string UserName { get; set; } Property Value String User name. Methods Clone() Creates a clone of this database configuration. IDatabaseConnectionConfiguration Clone() Returns IDatabaseConnectionConfiguration"
  },
  "api/OrpheusInterfaces.Configuration.html": {
    "href": "api/OrpheusInterfaces.Configuration.html",
    "title": "Namespace OrpheusInterfaces.Configuration | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Configuration Interfaces IDatabaseConnectionConfiguration Database connection configuration. Enums EncyrptConnection Database encryption connection mode"
  },
  "api/OrpheusInterfaces.Core.DatabaseEngineType.html": {
    "href": "api/OrpheusInterfaces.Core.DatabaseEngineType.html",
    "title": "Enum DatabaseEngineType | Orpheus",
    "keywords": "Enum DatabaseEngineType Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Database engine type. public enum DatabaseEngineType Fields dbMySQL = 2 MySQL. dbSQLite = 3 SQLite dbSQLServer = 1 SQL Server. dbUnknown = 0 Unknown - unsupported."
  },
  "api/OrpheusInterfaces.Core.ExtendedDbTypes.html": {
    "href": "api/OrpheusInterfaces.Core.ExtendedDbTypes.html",
    "title": "Enum ExtendedDbTypes | Orpheus",
    "keywords": "Enum ExtendedDbTypes Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. public enum ExtendedDbTypes Fields StringBlob = 999 A variable-length stream of Unicode data with a maximum length"
  },
  "api/OrpheusInterfaces.Core.IModifyRecordEventArguments-1.html": {
    "href": "api/OrpheusInterfaces.Core.IModifyRecordEventArguments-1.html",
    "title": "Interface IModifyRecordEventArguments<T> | Orpheus",
    "keywords": "Interface IModifyRecordEventArguments<T> Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus record modify event. Occurs when data are processed in memory. public interface IModifyRecordEventArguments<T> Type Parameters T Model type Properties ModifyAction int ModifyAction { get; } Property Value Int32 Modify action. 0 Insert, 1 Update, 2 Delete Record T Record { get; } Property Value T Modified record."
  },
  "api/OrpheusInterfaces.Core.IMySQLServerDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IMySQLServerDDLHelper.html",
    "title": "Interface IMySQLServerDDLHelper | Orpheus",
    "keywords": "Interface IMySQLServerDDLHelper Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll MySQL Server specific DDL helper definition. public interface IMySQLServerDDLHelper : IOrpheusDDLHelper Inherited Members IOrpheusDDLHelper.DatabaseExists(String) IOrpheusDDLHelper.SchemaObjectExists(ISchemaObject) IOrpheusDDLHelper.SchemaObjectExists(String) IOrpheusDDLHelper.SchemaObjectExists(ISchemaConstraint) IOrpheusDDLHelper.SchemaObjectId<T>(ISchemaObject) IOrpheusDDLHelper.CreateDatabase() IOrpheusDDLHelper.CreateDatabase(String) IOrpheusDDLHelper.CreateDatabaseWithDDL(String) IOrpheusDDLHelper.DB IOrpheusDDLHelper.TypeToString(Type) IOrpheusDDLHelper.DbTypeToString(DbType) IOrpheusDDLHelper.DelimitedIndetifierStart IOrpheusDDLHelper.DelimitedIndetifierEnd IOrpheusDDLHelper.SupportsGuidType IOrpheusDDLHelper.SupportsSchemaNameSpace IOrpheusDDLHelper.SafeFormatField(String) IOrpheusDDLHelper.ModifyColumnCommand IOrpheusDDLHelper.SafeFormatAlterTableDropColumn(String, List<String>) IOrpheusDDLHelper.SafeFormatAlterTableAddColumn(String, List<String>) IOrpheusDDLHelper.DatabaseName IOrpheusDDLHelper.DbEngineType IOrpheusDDLHelper.ConnectionString Properties SSLMode SSL connection mode. string SSLMode { get; set; } Property Value String"
  },
  "api/OrpheusInterfaces.Core.IOrpheusDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusDDLHelper.html",
    "title": "Interface IOrpheusDDLHelper | Orpheus",
    "keywords": "Interface IOrpheusDDLHelper Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. public interface IOrpheusDDLHelper Properties ConnectionString Builds the connection string. string ConnectionString { get; } Property Value String DatabaseName Gets the database name. string DatabaseName { get; } Property Value String DB Database for the DDL helper. IOrpheusDatabase DB { get; set; } Property Value IOrpheusDatabase Database the helper is associated with DbEngineType Returns the underlying connection type. DatabaseEngineType DbEngineType { get; } Property Value DatabaseEngineType DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. char DelimitedIndetifierEnd { get; } Property Value Char Char DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. char DelimitedIndetifierStart { get; } Property Value Char Char ModifyColumnCommand Returns the DB specific modify table command. string ModifyColumnCommand { get; } Property Value String SupportsGuidType Returns true if the DBEngine supports natively the Guid type. bool SupportsGuidType { get; } Property Value Boolean True if the DBEngine supports natively the Guid type SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. bool SupportsSchemaNameSpace { get; } Property Value Boolean Methods CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. bool CreateDatabase() Returns Boolean True if database was created successfully CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. bool CreateDatabase(string dbName) Parameters dbName String Database name Returns Boolean True if the database was created successfully CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. bool CreateDatabaseWithDDL(string ddlString) Parameters ddlString String DDL command Returns Boolean True if the database was created successfully DatabaseExists(String) Returns true the database exists. bool DatabaseExists(string dbName) Parameters dbName String Database name Returns Boolean DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. string DbTypeToString(DbType dataType) Parameters dataType DbType DbType Returns String String value for the DbType SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters tableName String Table's name that schema is going to change columnsToAdd List<String> Columns for creation Returns String SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters tableName String Table's name that schema is going to change columnsToDelete List<String> Columns for deletion Returns String SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. string SafeFormatField(string fieldName) Parameters fieldName String Field name Returns String Safely formated field name SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters schemaConstraint ISchemaConstraint Returns Boolean SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. bool SchemaObjectExists(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Schema Returns Boolean True if the object exists SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. bool SchemaObjectExists(string schemaObjectName) Parameters schemaObjectName String Schema Returns Boolean True if the object exists SchemaObjectId<T>(ISchemaObject) Gets the schema object, db engine assigned/generated, identifier. T SchemaObjectId<T>(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject The schema object. Returns T Type Parameters T TypeToString(Type) Returns the db engine specific string equivalent, for a .net type string TypeToString(Type type) Parameters type Type Type Returns String String value for the mapped DbType"
  },
  "api/OrpheusInterfaces.Core.IOrpheusDatabase.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusDatabase.html",
    "title": "Interface IOrpheusDatabase | Orpheus",
    "keywords": "Interface IOrpheusDatabase Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus database access component. public interface IOrpheusDatabase Properties Connected State of the database. Connected or not. bool Connected { get; } Property Value Boolean True if database is connected ConnectionString Gets the underlying IDbConnection connection string. string ConnectionString { get; } Property Value String The database connection string. DatabaseConnectionConfiguration IDatabaseConnectionConfiguration DatabaseConnectionConfiguration { get; set; } Property Value IDatabaseConnectionConfiguration Database connection configuration. DbConnection IDbConnection DbConnection { get; } Property Value IDbConnection Exposing the underlying IDbConnection instance. DDLHelper Helps execute DDL specific commands for the underlying db engine. IOrpheusDDLHelper DDLHelper { get; set; } Property Value IOrpheusDDLHelper An OrpheusDDLHelper instance. LastActiveTransaction IDbTransaction LastActiveTransaction { get; } Property Value IDbTransaction Last active transaction. Modules List of registered Orpheus modules. List<IOrpheusModule> Modules { get; } Property Value List<IOrpheusModule> Modules that are part in the database TypeMap Mapping dictionary of types to data types. Dictionary<Type, DbType> TypeMap { get; } Property Value Dictionary<Type, DbType> Type map dictionary between types and DbType. Methods BeginTransaction() Creates a transaction object. IDbTransaction BeginTransaction() Returns IDbTransaction Returns a transaction instance CommitTransaction(IDbTransaction) Commits a transaction. void CommitTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction Transaction to be committed. Connect(IDatabaseConnectionConfiguration) Connects to the database engine defined in the configuration object. void Connect(IDatabaseConnectionConfiguration databaseConnectionConfiguration) Parameters databaseConnectionConfiguration IDatabaseConnectionConfiguration The database connection configuration. Connect(String) Connects to the database engine defined in the connection string. void Connect(string connectionString = null) Parameters connectionString String The connection string. CreateCommand() Create a DbCommand. IDbCommand CreateCommand() Returns IDbCommand A DbCommand instance. CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters definition IOrpheusModuleDefinition Module definition Returns IOrpheusModule An IOrpheusModule instance CreateModuleDefinition() Creates an OrpheusModuleDefinition. IOrpheusModuleDefinition CreateModuleDefinition() Returns IOrpheusModuleDefinition An IOrpheusModuleDefinition instance. CreatePreparedQuery(String) Returns a prepared query with parameters created. IDbCommand CreatePreparedQuery(string SQL) Parameters SQL String SQL for the prepared query Returns IDbCommand A DbCommand instance. CreatePreparedQuery(String, List<String>, List<Object>) Returns a prepared query with parameters created. IDbCommand CreatePreparedQuery(string SQL, List<string> parameters, List<object> parameterValues = null) Parameters SQL String SQL for the prepared query parameters List<String> SQL parameters parameterValues List<Object> SQL parameter values Returns IDbCommand A DbCommand instance. CreateSchema(Guid, String, Double, String) Creates a schema object and sets it's database. ISchema CreateSchema(Guid id, string description, double version, string name = null) Parameters id Guid Schema id description String Schema description version Double Schema version name String Schema name.From the supported db engines, only SQL server has support for named schema's. Returns ISchema An ISchema instance. CreateTable<T>() Creates a table and sets its database,using the type name as the table name. IOrpheusTable<T> CreateTable<T>() Returns IOrpheusTable<T> Type Parameters T Table model type. CreateTable<T>(IOrpheusTableOptions) Creates a table and sets its database. IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters options IOrpheusTableOptions Table options Returns IOrpheusTable<T> An Orpheus table instance. Type Parameters T Model type for table CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates a table and sets its database. IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters tableName String Table name keyFields List<IOrpheusTableKeyField> Table key fields Returns IOrpheusTable<T> An Orpheus table instance. Type Parameters T Model type for the table CreateTableKeyField() Creates an OrpheusTableKeyField. IOrpheusTableKeyField CreateTableKeyField() Returns IOrpheusTableKeyField An IOrpheusTableKeyField instance. CreateTableOptions() Creates an OrpheusTableOptions. IOrpheusTableOptions CreateTableOptions() Returns IOrpheusTableOptions An IOrpheusTableOptions instance. DDLHelperAs<T>() Casts the DDL helper to the specified type. T DDLHelperAs<T>() Returns T An instance of T. Type Parameters T Type in which to cast the DDLHelper. Must be a descendant of IOrpheusDDLHelper. Disconnect() Disconnects from the database engine. void Disconnect() ExecuteDDL(String) Executes a DDL command. bool ExecuteDDL(string DDLCommand) Parameters DDLCommand String DbCommand to run. Returns Boolean True if command was successfully executed. GetTableCount(String) long GetTableCount(string tableName) Parameters tableName String Name of the table. Returns Int64 Returns the row count of a table. GetTableCount<T>() long GetTableCount<T>() Returns Int64 Returns the row count of a table. Type Parameters T The table type name, will be used as the table name. IsNullableType(Type) Returns true if the type is a nullable type. bool IsNullableType(Type type) Parameters type Type Type Returns Boolean True if type is nullable RegisterModule(IOrpheusModule) Register an Orpheus module to the database. void RegisterModule(IOrpheusModule module) Parameters module IOrpheusModule Module to be registered RollbackTransaction(IDbTransaction) Rolls back a transaction. void RollbackTransaction(IDbTransaction transaction) Parameters transaction IDbTransaction Transaction to be rolled-back. SQL<T>(IDbCommand, String) Executes a db command and returns it as specific model. List<T> SQL<T>(IDbCommand dbCommand, string tableName = null) Parameters dbCommand IDbCommand DbCommand to run. tableName String Optionally set the table name, for which the query will run. Returns List<T> A list of 'T' Type Parameters T SQL<T>(String, String) Executes a SQL statement and returns it as specific model. List<T> SQL<T>(string SQL, string tableName = null) Parameters SQL String SQL command to execute. tableName String Table name. Returns List<T> A list of 'T' Type Parameters T"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModelHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModelHelper.html",
    "title": "Interface IOrpheusModelHelper | Orpheus",
    "keywords": "Interface IOrpheusModelHelper Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus model helper public interface IOrpheusModelHelper Properties CustomFieldNameProperties Dictionary<string, string> CustomFieldNameProperties { get; } Property Value Dictionary<String, String> Model properties that have an explicitly set field name. ForeignKeys Dictionary<string, IForeignKey> ForeignKeys { get; } Property Value Dictionary<String, IForeignKey> Model's foreign keys. ModelProperties PropertyInfo[] ModelProperties { get; } Property Value PropertyInfo[] Model's properties. PrimaryCompositeKeys List<IOrpheusBaseCompositeKeyAttribute> PrimaryCompositeKeys { get; } Property Value List<IOrpheusBaseCompositeKeyAttribute> Model's composite primary keys. PrimaryKeys Dictionary<string, IPrimaryKey> PrimaryKeys { get; } Property Value Dictionary<String, IPrimaryKey> Model's primary keys. SchemaIgnoreProperties List<string> SchemaIgnoreProperties { get; } Property Value List<String> Model properties that are not part of the schema. SQLName string SQLName { get; } Property Value String Model's SQLName. Defaults to the model's type name. SQLServerSchemaName string SQLServerSchemaName { get; } Property Value String SQL server's schema name. UniqueCompositeKeys List<IOrpheusBaseCompositeKeyAttribute> UniqueCompositeKeys { get; } Property Value List<IOrpheusBaseCompositeKeyAttribute> Model's composite unique keys. UniqueKeys Dictionary<string, IUniqueKey> UniqueKeys { get; } Property Value Dictionary<String, IUniqueKey> Model's unique keys. Methods CreateInstance<T>() Creates an instance of the model and typecasts it to the given type. T CreateInstance<T>() Returns T Type Parameters T Type to cast the model CreateSchemaFields(ISchemaDataObject) Creates schema fields and constraints for a model. void CreateSchemaFields(ISchemaDataObject schemaObj) Parameters schemaObj ISchemaDataObject GetAlterDDLCommands(ISchemaDataObject, IOrpheusDDLHelper) Creates a list of SQL ALTER commands, based on the differences between the current version of the model and the current version of the corresponding db table. List<string> GetAlterDDLCommands(ISchemaDataObject schemaObj, IOrpheusDDLHelper ddlHelper) Parameters schemaObj ISchemaDataObject ddlHelper IOrpheusDDLHelper Returns List<String> GetFieldNameForProperty(PropertyInfo) Helper function that returns the corresponding field name for a property. string GetFieldNameForProperty(PropertyInfo prop) Parameters prop PropertyInfo Returns String IsSchemaProperty(PropertyInfo) Helper function that returns true if the property is not actually part of the schema. bool IsSchemaProperty(PropertyInfo property) Parameters property PropertyInfo Returns Boolean"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModule.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModule.html",
    "title": "Interface IOrpheusModule | Orpheus",
    "keywords": "Interface IOrpheusModule Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. public interface IOrpheusModule Properties Database Module's database. IOrpheusDatabase Database { get; } Property Value IOrpheusDatabase Module's database Definition Module's definition. IOrpheusModuleDefinition Definition { get; } Property Value IOrpheusModuleDefinition Module's definition MainTable The module's main table. IOrpheusTable MainTable { get; set; } Property Value IOrpheusTable Module's main table ReferenceTables List of module's reference tables. Reference tables are tables that are referenced from a module table, through a foreign key constraint. List<IOrpheusTable> ReferenceTables { get; } Property Value List<IOrpheusTable> Module's reference tables Tables List of module's tables. List<IOrpheusTable> Tables { get; } Property Value List<IOrpheusTable> Module's tables Methods ClearData() Clears data from all module tables. void ClearData() GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. IOrpheusTable<T> GetReferenceTable<T>() Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type GetReferenceTable<T>(Int32) Gets a table by index, for a model. IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters index Int32 Table index Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type GetReferenceTable<T>(String) Gets a table by name, for a model. IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters tableName String Table index Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type GetTable<T>() Gets a table by model. Uses the model class name as the table name. IOrpheusTable<T> GetTable<T>() Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type GetTable<T>(Int32) Gets a table by index, for a model. IOrpheusTable<T> GetTable<T>(int index) Parameters index Int32 Table index Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type GetTable<T>(String) Gets a table by name, for a model. IOrpheusTable<T> GetTable<T>(string tableName) Parameters tableName String Table name Returns IOrpheusTable<T> An instance of IOrpheusTableT Type Parameters T Model type Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. This applies only for the MainTable. void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters keyValues Dictionary<String, List<Object>> logicalOperator LogicalOperator clearExistingData Boolean Load(List<Object>) Loads a module's record from the database. void Load(List<object> keyValues = null) Parameters keyValues List<Object> Load(IDbCommand, Boolean) Loads main table data by executing a db command. void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters dbCommand IDbCommand clearExistingData Boolean Save() Saves all changes to the database. void Save() Events OnAfterSave Occurs after the transaction has been commited. event EventHandler<ISaveEventArguments> OnAfterSave Event Type EventHandler<ISaveEventArguments> OnBeforeSave Occurs before records are save in the database. event EventHandler<ISaveEventArguments> OnBeforeSave Event Type EventHandler<ISaveEventArguments>"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModuleDefinition.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModuleDefinition.html",
    "title": "Interface IOrpheusModuleDefinition | Orpheus",
    "keywords": "Interface IOrpheusModuleDefinition Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll The definition/database properties of a module. public interface IOrpheusModuleDefinition Properties Database Orpheus database. IOrpheusDatabase Database { get; set; } Property Value IOrpheusDatabase Orpheus Database DetailTableOptions List of module's detail table options. List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value List<IOrpheusTableOptions> Module's detail table options MainTableOptions Module's main table options. IOrpheusTableOptions MainTableOptions { get; set; } Property Value IOrpheusTableOptions Module's main table options Name Module name. string Name { get; set; } Property Value String Module name ReferenceTableOptions List of module reference tables. List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value List<IOrpheusTableOptions> Module's reference table options Methods CreateTableOptions() Creates an instance of OrpheusTableOptions. IOrpheusTableOptions CreateTableOptions() Returns IOrpheusTableOptions An IOrpheusTableOptions instance CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters tableName String modelType Type Returns IOrpheusTableOptions An IOrpheusTableOptions instance CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters modelType Type Returns IOrpheusTableOptions An IOrpheusTableOptions instance LoadFrom(Stream) Load definition from stream. void LoadFrom(Stream stream) Parameters stream Stream LoadFrom(String) Loads definition from a file. void LoadFrom(string fileName) Parameters fileName String LoadFromDB(String) Loads definition from the connected database. void LoadFromDB(string moduleName) Parameters moduleName String SaveTo(Stream) Saves definition to a stream. void SaveTo(Stream stream) Parameters stream Stream SaveTo(String) Saves definition to a file. void SaveTo(string fileName) Parameters fileName String SaveToDB() Saves the definition the connected database. void SaveToDB()"
  },
  "api/OrpheusInterfaces.Core.IOrpheusReferenceTable-1.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusReferenceTable-1.html",
    "title": "Interface IOrpheusReferenceTable<T> | Orpheus",
    "keywords": "Interface IOrpheusReferenceTable<T> Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus reference table. public interface IOrpheusReferenceTable<T> : IOrpheusReferenceTable, IOrpheusTable Type Parameters T Model type Inherited Members IOrpheusTable.Name IOrpheusTable.SchemaName IOrpheusTable.Modified IOrpheusTable.MasterTable IOrpheusTable.MasterTableKeyFields IOrpheusTable.KeyFields IOrpheusTable.DetailTables IOrpheusTable.Level IOrpheusTable.ExecuteDeletes(IDbTransaction) IOrpheusTable.ExecuteUpdates(IDbTransaction) IOrpheusTable.ExecuteInserts(IDbTransaction) IOrpheusTable.Load(List<Object>, Boolean) IOrpheusTable.Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) IOrpheusTable.Load(String, Boolean) IOrpheusTable.Load(IDbCommand, Boolean) IOrpheusTable.ClearData() IOrpheusTable.GetKeyValues() IOrpheusTable.Save(IDbTransaction, Boolean) IOrpheusTable.OnBeforeSave IOrpheusTable.OnAfterSave"
  },
  "api/OrpheusInterfaces.Core.IOrpheusReferenceTable.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusReferenceTable.html",
    "title": "Interface IOrpheusReferenceTable | Orpheus",
    "keywords": "Interface IOrpheusReferenceTable Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus reference table. public interface IOrpheusReferenceTable : IOrpheusTable Inherited Members IOrpheusTable.Name IOrpheusTable.SchemaName IOrpheusTable.Modified IOrpheusTable.MasterTable IOrpheusTable.MasterTableKeyFields IOrpheusTable.KeyFields IOrpheusTable.DetailTables IOrpheusTable.Level IOrpheusTable.ExecuteDeletes(IDbTransaction) IOrpheusTable.ExecuteUpdates(IDbTransaction) IOrpheusTable.ExecuteInserts(IDbTransaction) IOrpheusTable.Load(List<Object>, Boolean) IOrpheusTable.Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) IOrpheusTable.Load(String, Boolean) IOrpheusTable.Load(IDbCommand, Boolean) IOrpheusTable.ClearData() IOrpheusTable.GetKeyValues() IOrpheusTable.Save(IDbTransaction, Boolean) IOrpheusTable.OnBeforeSave IOrpheusTable.OnAfterSave"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTable-1.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTable-1.html",
    "title": "Interface IOrpheusTable<T> | Orpheus",
    "keywords": "Interface IOrpheusTable<T> Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. public interface IOrpheusTable<T> : IOrpheusTable Type Parameters T Model type Inherited Members IOrpheusTable.Name IOrpheusTable.SchemaName IOrpheusTable.Modified IOrpheusTable.MasterTable IOrpheusTable.MasterTableKeyFields IOrpheusTable.KeyFields IOrpheusTable.DetailTables IOrpheusTable.Level IOrpheusTable.ExecuteDeletes(IDbTransaction) IOrpheusTable.ExecuteUpdates(IDbTransaction) IOrpheusTable.ExecuteInserts(IDbTransaction) IOrpheusTable.Load(List<Object>, Boolean) IOrpheusTable.Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) IOrpheusTable.Load(String, Boolean) IOrpheusTable.Load(IDbCommand, Boolean) IOrpheusTable.ClearData() IOrpheusTable.GetKeyValues() IOrpheusTable.Save(IDbTransaction, Boolean) IOrpheusTable.OnBeforeSave IOrpheusTable.OnAfterSave Properties Data Table's data. List<T> Data { get; } Property Value List<T> Table's data Methods Add(T) Adds a new record to the table. void Add(T newRecord) Parameters newRecord T New record to be added Add(List<T>) Adds a list of new records. void Add(List<T> newRecords) Parameters newRecords List<T> New records to be added Delete(T) Deletes a record. void Delete(T record) Parameters record T Record to delete Delete(List<T>) Deletes records. void Delete(List<T> records) Parameters records List<T> Records to be deleted Update(T) Updates an existing record. void Update(T record) Parameters record T Record to be updated Update(List<T>) Updates existing records. void Update(List<T> records) Parameters records List<T> Records to be updated Events OnAfterModify Occurs after a table modifies a record. It is fired on any Add,Update,Delete event EventHandler<IModifyRecordEventArguments<T>> OnAfterModify Event Type EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Occurs before a table modifies a record. It is fired on any Add,Update,Delete event EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Event Type EventHandler<IModifyRecordEventArguments<T>>"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTable.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTable.html",
    "title": "Interface IOrpheusTable | Orpheus",
    "keywords": "Interface IOrpheusTable Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus table is the core Orpheus data object. It is responsible for performing data operations. public interface IOrpheusTable Properties DetailTables List of dependent detail tables. List<IOrpheusTable> DetailTables { get; } Property Value List<IOrpheusTable> List of detail tables KeyFields Table's key field(s). List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value List<IOrpheusTableKeyField> Table's key field(s) Level Table's level. Zero if the table is not a child to any other table. int Level { get; } Property Value Int32 Table's level MasterTable Master table name, if the table is a detail table. IOrpheusTable MasterTable { get; set; } Property Value IOrpheusTable Master table name MasterTableKeyFields Master table's key field(s), if the table is detail table. List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value List<IOrpheusTableKeyField> Master table key fields Modified True when table data have been modified. bool Modified { get; } Property Value Boolean True if table data have been modified Name The table name. string Name { get; } Property Value String Table name SchemaName The table's schema name. Applicable only if the db engine is SQL Server. string SchemaName { get; } Property Value String Methods ClearData() Clears existing loaded data. void ClearData() ExecuteDeletes(IDbTransaction) Executes any delete changes that the table has. void ExecuteDeletes(IDbTransaction transaction) Parameters transaction IDbTransaction ExecuteInserts(IDbTransaction) Executes any insert changes that the table has. void ExecuteInserts(IDbTransaction transaction) Parameters transaction IDbTransaction ExecuteUpdates(IDbTransaction) Executes any update changes that the table has. void ExecuteUpdates(IDbTransaction transaction) Parameters transaction IDbTransaction GetKeyValues() Returns list of current key values. List<KeyValuePair<string, object>> GetKeyValues() Returns List<KeyValuePair<String, Object>> List of current key values Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters keyValues Dictionary<String, List<Object>> logicalOperator LogicalOperator clearExistingData Boolean Load(List<Object>, Boolean) Loads records from the DB to the table. void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters keyValues List<Object> clearExistingData Boolean Load(IDbCommand, Boolean) Loads table data by executing a db command. void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters dbCommand IDbCommand clearExistingData Boolean Load(String, Boolean) Loads table data by executing a SQL command. void Load(string SQL, bool clearExistingData = true) Parameters SQL String SQL command to be executed clearExistingData Boolean Save(IDbTransaction, Boolean) Save changes to the database. void Save(IDbTransaction dbTransaction = null, bool commitTransaction = true) Parameters dbTransaction IDbTransaction Transaction in which the commands will be executed commitTransaction Boolean Commit transaction after save. Events OnAfterSave Occurs after the transaction has been committed. event EventHandler<ISaveEventArguments> OnAfterSave Event Type EventHandler<ISaveEventArguments> OnBeforeSave Occurs before records are save in the database. event EventHandler<ISaveEventArguments> OnBeforeSave Event Type EventHandler<ISaveEventArguments>"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTableKeyField.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTableKeyField.html",
    "title": "Interface IOrpheusTableKeyField | Orpheus",
    "keywords": "Interface IOrpheusTableKeyField Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Represents an Orpheus table key field. public interface IOrpheusTableKeyField Properties IsAutoGenerated If set to true and the type is System.Guid then with every new insert, a value will be auto generated. bool IsAutoGenerated { get; set; } Property Value Boolean True if the field value is auto generated IsDBGenerated True if the underlying db engine is going to generate the value for the key. bool IsDBGenerated { get; set; } Property Value Boolean True if field value is DB generated KeySQLUpdate Function that returns a SQL string to be used in a WHERE clause, to select the new key value(s) after an insert. Func<string> KeySQLUpdate { get; set; } Property Value Func<String> Function that returns a SQL string Name Name of the field that is the table key. string Name { get; set; } Property Value String Field name"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTableOptions.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTableOptions.html",
    "title": "Interface IOrpheusTableOptions | Orpheus",
    "keywords": "Interface IOrpheusTableOptions Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Represents IOrpheusTable options, which can be used to instantiate a table. public interface IOrpheusTableOptions Properties Database Database that the table is a part of. [IgnoreDataMember] IOrpheusDatabase Database { get; set; } Property Value IOrpheusDatabase Database that the table is part of KeyFields Table's key field(s). Can be more than one to support composite keys. List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value List<IOrpheusTableKeyField> Table's key fields MasterTable Table's master table. To support the master-detail relationship. [IgnoreDataMember] IOrpheusTable MasterTable { get; set; } Property Value IOrpheusTable Table's master table MasterTableKeyFields Master table's key field(s). Can be more than one to support composite keys. List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value List<IOrpheusTableKeyField> Master table's key field MasterTableName Table's master table. To support the master-detail relationship. string MasterTableName { get; set; } Property Value String Table's master table name ModelType Model type. Type ModelType { get; set; } Property Value Type Table model type TableName Table's name. string TableName { get; set; } Property Value String Table's name Methods AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters name String Field name isAutoGenerated Boolean Auto generate flag isDBGenerated Boolean DB generated flag keySQLUpdate Func<String> Function to return a custom SQL when updating the field value AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters name String Field name isAutoGenerated Boolean Auto generate flag isDBGenerated Boolean DB generated flag keySQLUpdate Func<String> Function to return a custom SQL when updating the field value"
  },
  "api/OrpheusInterfaces.Core.ISQLServerDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.ISQLServerDDLHelper.html",
    "title": "Interface ISQLServerDDLHelper | Orpheus",
    "keywords": "Interface ISQLServerDDLHelper Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll SQL Server specific DDL helper definition. public interface ISQLServerDDLHelper : IOrpheusDDLHelper Inherited Members IOrpheusDDLHelper.DatabaseExists(String) IOrpheusDDLHelper.SchemaObjectExists(ISchemaObject) IOrpheusDDLHelper.SchemaObjectExists(String) IOrpheusDDLHelper.SchemaObjectExists(ISchemaConstraint) IOrpheusDDLHelper.SchemaObjectId<T>(ISchemaObject) IOrpheusDDLHelper.CreateDatabase() IOrpheusDDLHelper.CreateDatabase(String) IOrpheusDDLHelper.CreateDatabaseWithDDL(String) IOrpheusDDLHelper.DB IOrpheusDDLHelper.TypeToString(Type) IOrpheusDDLHelper.DbTypeToString(DbType) IOrpheusDDLHelper.DelimitedIndetifierStart IOrpheusDDLHelper.DelimitedIndetifierEnd IOrpheusDDLHelper.SupportsGuidType IOrpheusDDLHelper.SupportsSchemaNameSpace IOrpheusDDLHelper.SafeFormatField(String) IOrpheusDDLHelper.ModifyColumnCommand IOrpheusDDLHelper.SafeFormatAlterTableDropColumn(String, List<String>) IOrpheusDDLHelper.SafeFormatAlterTableAddColumn(String, List<String>) IOrpheusDDLHelper.DatabaseName IOrpheusDDLHelper.DbEngineType IOrpheusDDLHelper.ConnectionString Properties SchemaSeparator Schema separator. Char that separates the schema name and the schema object. By default in SQL server, the separator is the dot char. string SchemaSeparator { get; } Property Value String Methods AddDatabaseRoleMember(String, String) Adds a database user to the specified role. void AddDatabaseRoleMember(string roleName, string userName) Parameters roleName String userName String ChangeDatabaseUserPassword(String, String, String) Changes the password for an existing user. void ChangeDatabaseUserPassword(string userName, string oldPassword, string newPassword) Parameters userName String oldPassword String newPassword String CreateDatabaseRole(String, String) Creates a database role. void CreateDatabaseRole(string roleName, string owner = null) Parameters roleName String owner String CreateDatabaseUser(String, String) Creates a contained database user. void CreateDatabaseUser(string userName, string password) Parameters userName String password String CreateSchema(String) Creates a schema. void CreateSchema(string schemaName) Parameters schemaName String DatabaseRoleExists(String) Returns true if the database role exists. bool DatabaseRoleExists(string roleName) Parameters roleName String Returns Boolean DatabaseUserExists(String) Returns true if a database user exists. bool DatabaseUserExists(string userName) Parameters userName String Returns Boolean Deny(List<String>, String) Deny permissions to a database principal. void Deny(List<string> permissions, string databasePrincipal) Parameters permissions List<String> databasePrincipal String Deny(String, String) Deny permission to a database principal. void Deny(string permission, string databasePrincipal) Parameters permission String databasePrincipal String Deny(String, String, String) Denies permission to a database principal for a specific schema object. void Deny(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String DropDatabaseRole(String) Drops a database role. void DropDatabaseRole(string roleName) Parameters roleName String DropDatabaseRoleMember(String, String) Drops a database user to the specified role. void DropDatabaseRoleMember(string roleName, string userName) Parameters roleName String userName String DropDatabaseUser(String) Drops a user. void DropDatabaseUser(string userName) Parameters userName String DropSchema(String) Drops a schema. void DropSchema(string schemaName) Parameters schemaName String EnableContainedDatabases(Boolean) Enables/disables the contained database feature on the SQL server instance. A feature supported from SQL server 2012 and later. void EnableContainedDatabases(bool enable) Parameters enable Boolean Grant(List<String>, String) Grants permission to a database principal. void Grant(List<string> permissions, string databasePrincipal) Parameters permissions List<String> databasePrincipal String Grant(String, String) Grants permission to a database principal. void Grant(string permission, string databasePrincipal) Parameters permission String databasePrincipal String Grant(String, String, String) Grants permission to a database principal for a specific schema object. void Grant(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String Revoke(List<String>, String, String) Revoke permissions for a database principal. void Revoke(List<string> permissions, string schemaObject, string databasePrincipal) Parameters permissions List<String> schemaObject String databasePrincipal String Revoke(String, String, String) Revoke permission for a database principal. void Revoke(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String SchemaExists(String) Returns true if the schema exists. bool SchemaExists(string schemaName) Parameters schemaName String Returns Boolean SchemaObjectExists(String, String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. bool SchemaObjectExists(string schemaObjectName, string schemaName = null) Parameters schemaObjectName String schemaName String Returns Boolean SetDatabaseContainment(String, String) Sets the containment option for a database. void SetDatabaseContainment(string containment, string databaseName = null) Parameters containment String Containment value. NONE or PARTIAL databaseName String"
  },
  "api/OrpheusInterfaces.Core.ISaveEventArguments.html": {
    "href": "api/OrpheusInterfaces.Core.ISaveEventArguments.html",
    "title": "Interface ISaveEventArguments | Orpheus",
    "keywords": "Interface ISaveEventArguments Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Orpheus save event arguments. Occurs when data are actually being save to the database. public interface ISaveEventArguments Properties Transaction IDbTransaction Transaction { get; set; } Property Value IDbTransaction Current transaction."
  },
  "api/OrpheusInterfaces.Core.LogicalOperator.html": {
    "href": "api/OrpheusInterfaces.Core.LogicalOperator.html",
    "title": "Enum LogicalOperator | Orpheus",
    "keywords": "Enum LogicalOperator Namespace OrpheusInterfaces.Core Assembly OrpheusInterfaces.dll Logical operator public enum LogicalOperator Fields loAND = 0 The AND operator displays a record if all the conditions separated by AND is TRUE. loNOT = 2 The NOT operator displays a record if the condition(s) is NOT TRUE. loOR = 1 The OR operator displays a record if any of the conditions separated by OR is TRUE."
  },
  "api/OrpheusInterfaces.Core.html": {
    "href": "api/OrpheusInterfaces.Core.html",
    "title": "Namespace OrpheusInterfaces.Core | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Core Interfaces IModifyRecordEventArguments<T> Orpheus record modify event. Occurs when data are processed in memory. IMySQLServerDDLHelper MySQL Server specific DDL helper definition. IOrpheusDatabase Orpheus database access component. IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. IOrpheusModelHelper Orpheus model helper IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. IOrpheusModuleDefinition The definition/database properties of a module. IOrpheusReferenceTable Orpheus reference table. IOrpheusReferenceTable<T> Orpheus reference table. IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. IOrpheusTableKeyField Represents an Orpheus table key field. IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. ISaveEventArguments Orpheus save event arguments. Occurs when data are actually being save to the database. ISQLServerDDLHelper SQL Server specific DDL helper definition. Enums DatabaseEngineType Database engine type. ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. LogicalOperator Logical operator"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IForeignKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IForeignKey.html",
    "title": "Interface IForeignKey | Orpheus",
    "keywords": "Interface IForeignKey Namespace OrpheusInterfaces.Interfaces.Attributes Assembly OrpheusInterfaces.dll Orpheus foreign key attribute public interface IForeignKey : IOrpheusBaseAttribute Properties Field string Field { get; set; } Property Value String The foreign key field name. OnDeleteCascade bool OnDeleteCascade { get; } Property Value Boolean Set to true to enable cascade delete. OnUpdateCascade bool OnUpdateCascade { get; } Property Value Boolean Set to true to enable cascade update. ReferenceField string ReferenceField { get; } Property Value String The reference table key. ReferenceTable string ReferenceTable { get; } Property Value String The reference table. SchemaName string SchemaName { get; set; } Property Value String Optional. Set the schema name of the reference table, if there is one."
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseAttribute.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseAttribute.html",
    "title": "Interface IOrpheusBaseAttribute | Orpheus",
    "keywords": "Interface IOrpheusBaseAttribute Namespace OrpheusInterfaces.Interfaces.Attributes Assembly OrpheusInterfaces.dll Orpheus base attribute. public interface IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseCompositeKeyAttribute.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseCompositeKeyAttribute.html",
    "title": "Interface IOrpheusBaseCompositeKeyAttribute | Orpheus",
    "keywords": "Interface IOrpheusBaseCompositeKeyAttribute Namespace OrpheusInterfaces.Interfaces.Attributes Assembly OrpheusInterfaces.dll Orpheus composite key attribute public interface IOrpheusBaseCompositeKeyAttribute : IOrpheusBaseAttribute Properties Fields List of fields that are the key. string[] Fields { get; } Property Value String[] Array of field names Sort Sort for the key. string Sort { get; } Property Value String Sort direction"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IPrimaryKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IPrimaryKey.html",
    "title": "Interface IPrimaryKey | Orpheus",
    "keywords": "Interface IPrimaryKey Namespace OrpheusInterfaces.Interfaces.Attributes Assembly OrpheusInterfaces.dll Orpheus primary key attribute public interface IPrimaryKey : IOrpheusBaseAttribute Properties IsAutoGenerated Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. bool IsAutoGenerated { get; } Property Value Boolean True if the key value is auto-generated. IsDBGenerated Indicates if the primary key value is auto-generated. bool IsDBGenerated { get; } Property Value Boolean True if the key is generated from the DB engine"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IUniqueKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IUniqueKey.html",
    "title": "Interface IUniqueKey | Orpheus",
    "keywords": "Interface IUniqueKey Namespace OrpheusInterfaces.Interfaces.Attributes Assembly OrpheusInterfaces.dll Orpheus unique key attribute public interface IUniqueKey : IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.html",
    "title": "Namespace OrpheusInterfaces.Interfaces.Attributes | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Interfaces.Attributes Interfaces IForeignKey Orpheus foreign key attribute IOrpheusBaseAttribute Orpheus base attribute. IOrpheusBaseCompositeKeyAttribute Orpheus composite key attribute IPrimaryKey Orpheus primary key attribute IUniqueKey Orpheus unique key attribute"
  },
  "api/OrpheusInterfaces.Schema.DDLAction.html": {
    "href": "api/OrpheusInterfaces.Schema.DDLAction.html",
    "title": "Enum DDLAction | Orpheus",
    "keywords": "Enum DDLAction Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll DDL action. public enum DDLAction Fields ddlAlter = 1 DDL alter. ddlCreate = 0 DDL create. ddlDrop = 2 DDL drop."
  },
  "api/OrpheusInterfaces.Schema.IForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IForeignKeySchemaConstraint.html",
    "title": "Interface IForeignKeySchemaConstraint | Orpheus",
    "keywords": "Interface IForeignKeySchemaConstraint Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll A foreign key constraint. public interface IForeignKeySchemaConstraint : ISchemaConstraint Inherited Members ISchemaConstraint.Name ISchemaConstraint.Fields ISchemaConstraint.Sort ISchemaConstraint.SQL() ISchemaConstraint.Action ISchemaConstraint.SchemaObject ISchemaConstraint.ConstraintSQLCommand Properties ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. List<string> ForeignKeyFields { get; set; } Property Value List<String> List of key fields ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. string ForeignKeySchemaObject { get; set; } Property Value String Constraint's key OnDeleteCascade Cascade on delete. bool OnDeleteCascade { get; set; } Property Value Boolean True if cascade on delete is on OnUpdateCascade Cascade on update. bool OnUpdateCascade { get; set; } Property Value Boolean True if cascade on update is on"
  },
  "api/OrpheusInterfaces.Schema.IPrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IPrimaryKeySchemaConstraint.html",
    "title": "Interface IPrimaryKeySchemaConstraint | Orpheus",
    "keywords": "Interface IPrimaryKeySchemaConstraint Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll A primary key constraint. public interface IPrimaryKeySchemaConstraint : ISchemaConstraint Inherited Members ISchemaConstraint.Name ISchemaConstraint.Fields ISchemaConstraint.Sort ISchemaConstraint.SQL() ISchemaConstraint.Action ISchemaConstraint.SchemaObject ISchemaConstraint.ConstraintSQLCommand"
  },
  "api/OrpheusInterfaces.Schema.ISchema.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchema.html",
    "title": "Interface ISchema | Orpheus",
    "keywords": "Interface ISchema Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Represents an Orpheus Schema. public interface ISchema Properties DB Orpheus database. IOrpheusDatabase DB { get; } Property Value IOrpheusDatabase Instance of the Orpheus Database Description Schema description. string Description { get; } Property Value String Schema description Id Schema Id. Guid Id { get; } Property Value Guid Schema unique id Name DB SQL schema name. string Name { get; } Property Value String ReferencedSchemas List of other schemas. List<ISchema> ReferencedSchemas { get; } Property Value List<ISchema> SchemaInfoTable Orpheus schema info table. string SchemaInfoTable { get; } Property Value String Table name for the Orpheus schema information table SchemaModulesTable Orpheus module definition table. string SchemaModulesTable { get; } Property Value String Table name for the Orpheus schema modules table SchemaObjects List of schema objects. ISchemaObject List<ISchemaObject> SchemaObjects { get; } Property Value List<ISchemaObject> SchemaObjectsTable Orpheus schema objects table. string SchemaObjectsTable { get; } Property Value String Table name for the Orpheus schema objects table Version Schema version. double Version { get; } Property Value Double Schema version Methods AddSchemaObject(ISchemaObject) Adds a schema object to the list. ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Returns ISchemaObject The schema object that was added AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters model Object Model will be used to auto-generate fields, primary keys etc, for the schema object dependencies List<ISchemaObject> List of schema objects, that this objects depends upon Returns ISchemaTable AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters tableName String Table name dependencies List<ISchemaObject> List of schema objects, that this objects depends upon model Object Model will be used to auto-generate fields, primary keys etc, for the schema object Returns ISchemaTable AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters modelType Type Model type will be used to auto-generate fields, primary keys etc, for the schema object dependencies List<ISchemaObject> List of schema objects, that this objects depends upon Returns ISchemaTable AddSchemaTable<T>(List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class Parameters dependencies List<ISchemaObject> The dependencies. Returns ISchemaTable Type Parameters T Schema table type AddSchemaTable<T, D>() Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. ISchemaTable AddSchemaTable<T, D>() Returns ISchemaTable Type Parameters T Model type D Dependency model type CreateSchemaJoinDefinition() Creates a join schema definition. ISchemaJoinDefinition CreateSchemaJoinDefinition() Returns ISchemaJoinDefinition CreateSchemaObject() Creates a schema object. ISchemaObject CreateSchemaObject() Returns ISchemaObject CreateSchemaTable() Creates a table schema object. ISchemaTable CreateSchemaTable() Returns ISchemaTable CreateSchemaView() Creates a view schema object. ISchemaView CreateSchemaView() Returns ISchemaView CreateSchemaViewTable() Creates a view table schema object. ISchemaViewTable CreateSchemaViewTable() Returns ISchemaViewTable Drop() Drops schema. Removes all schema objects from the database. void Drop() Execute() Iterate through the schema objects and executes them. void Execute() LoadFromFile(String) Loads schema from an xml file. void LoadFromFile(string fileName) Parameters fileName String RegisterSchema() Registers schema information, in the schema information table. void RegisterSchema() RemoveSchemaObject(ISchemaObject) Removes from the schema list void RemoveSchemaObject(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Schema object to remove SaveToFile(String) Saves schema to an xml file. void SaveToFile(string fileName) Parameters fileName String SchemaObjectExists(ISchemaObject) Returns the guid of the schema object it is created. Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Schema object to be checked if it exists Returns Guid The schema object unique id"
  },
  "api/OrpheusInterfaces.Schema.ISchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaConstraint.html",
    "title": "Interface ISchemaConstraint | Orpheus",
    "keywords": "Interface ISchemaConstraint Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Represents a schema constraint. public interface ISchemaConstraint Properties Action Returns true if the constraint needs to drop. DDLAction Action { get; set; } Property Value DDLAction Constraint's DDLAction ConstraintSQLCommand The constraint SQL command. UNIQUE, PRIMARY KEY etc. string ConstraintSQLCommand { get; } Property Value String Fields Fields which the constraint will be applied. List<string> Fields { get; set; } Property Value List<String> Fields affected from the constraint Name Constraint name. string Name { get; set; } Property Value String Constraint name SchemaObject Schema object were this schema constraint exists ISchemaDataObject SchemaObject { get; } Property Value ISchemaDataObject The schema object where the constraint exists Sort Key's sort direction. SchemaSort Sort { get; set; } Property Value SchemaSort Schema sort type Methods SQL() Returns the SQL definition of the key. string SQL() Returns String Constraint's SQL"
  },
  "api/OrpheusInterfaces.Schema.ISchemaDataObject.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaDataObject.html",
    "title": "Interface ISchemaDataObject | Orpheus",
    "keywords": "Interface ISchemaDataObject Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Base schema data object interface. public interface ISchemaDataObject : ISchemaObject Inherited Members ISchemaObject.SQLName ISchemaObject.RawDDL ISchemaObject.GetDDLString() ISchemaObject.Schema ISchemaObject.AddDependency(ISchemaObject) ISchemaObject.AddDependency(Type) ISchemaObject.AddDependency<T>() ISchemaObject.Execute() ISchemaObject.Drop() ISchemaObject.Action ISchemaObject.UniqueKey ISchemaObject.SchemaObjectsThatIDepend ISchemaObject.SchemaObjectsThatDependOnMe ISchemaObject.GetSchemaType() ISchemaObject.IsCreated ISchemaObject.AliasName Properties Constraints List of schema object constraints. Primary,foreign or any type of constraint. List<ISchemaConstraint> Constraints { get; set; } Property Value List<ISchemaConstraint> Constraints in the schema object DB Orpheus database. IOrpheusDatabase DB { get; } Property Value IOrpheusDatabase Database where the schema object exists Fields Fields for the schema object. Applicable mostly when schema object is a table or a view. List<ISchemaField> Fields { get; set; } Property Value List<ISchemaField> Fields in the schema object Methods AddField(String, String, Boolean, String, String, String) Creates and adds a field to the field list. ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters name String Field name dataType String Field data type nullable Boolean Nullable defaultValue String Field default value size String Field size alias String Field alias Returns ISchemaField AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds a foreign key constraint. IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateDelete = true) Parameters name String Constraint name fields List<String> Constraint fields foreignKeySchemaObject String Reference table name foreignKeySchemaFields List<String> Reference table fields onCascadeDelete Boolean Cascade on delete onUpdateDelete Boolean Cascade on update Returns IForeignKeySchemaConstraint AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters name String Constraint name fields List<String> Constraint fields sort SchemaSort Constraint sort Returns IPrimaryKeySchemaConstraint AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters name String Constraint name fields List<String> Constraint fields Returns IUniqueKeySchemaConstraint An IUniqueKeySchemaConstraint CreateFieldsFromModel(Object) Creates fields from a given model. Supports OrpheusAttributes attributes Instance of model void CreateFieldsFromModel(object model) Parameters model Object CreateFieldsFromModel(Type) Creates fields from a given model. Supports OrpheusAttributes attributes Model type void CreateFieldsFromModel(Type modelType) Parameters modelType Type CreateFieldsFromModel<T>() Creates fields from a given model. Supports OrpheusAttributes attributes void CreateFieldsFromModel<T>() Type Parameters T Model type GetConstraintsDDL() Returns the DDL constraints string to be executed. List<string> GetConstraintsDDL() Returns List<String> Get the generated DDL string for the schema constraints GetData<T>() Returns the seed data for the table if defined. List<T> GetData<T>() Returns List<T> Schema object's data Type Parameters T Schema object model type SetData<T>(List<T>) Optional data to initialize a schema object. Practically applicable only to a table. void SetData<T>(List<T> data) Parameters data List<T> Type Parameters T"
  },
  "api/OrpheusInterfaces.Schema.ISchemaField.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaField.html",
    "title": "Interface ISchemaField | Orpheus",
    "keywords": "Interface ISchemaField Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Represents a schema field. public interface ISchemaField Properties Alias Field alias. string Alias { get; set; } Property Value String Field alias DataType Field data type. string DataType { get; set; } Property Value String Field data type DefaultValue Field's default value. string DefaultValue { get; set; } Property Value String Field's default value FullFieldName Gets the full field name. string FullFieldName { get; } Property Value String Name Field name. string Name { get; set; } Property Value String Field name Nullable True if field accepts null values. bool Nullable { get; set; } Property Value Boolean True if field accepts null values SchemaObject Schema object where this schema field exists ISchemaObject SchemaObject { get; } Property Value ISchemaObject Schema object where the field exists Size Field size (if applicable). string Size { get; set; } Property Value String Field size TableName Table where the field belongs. string TableName { get; set; } Property Value String Methods SQL() Returns SQL definition for the field. string SQL() Returns String SQL definition for the field"
  },
  "api/OrpheusInterfaces.Schema.ISchemaJoinDefinition.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaJoinDefinition.html",
    "title": "Interface ISchemaJoinDefinition | Orpheus",
    "keywords": "Interface ISchemaJoinDefinition Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Represents a schema join definition, which can be used by ISchemaObject when a schema is created. public interface ISchemaJoinDefinition Properties JoinKeyField Key field name of the join object. string JoinKeyField { get; set; } Property Value String Key field name of the join object JoinOperator Join operator SchemaJoinOperator. SchemaJoinOperator JoinOperator { get; set; } Property Value SchemaJoinOperator Join operator JoinTableName Table name to perform the join. string JoinTableName { get; set; } Property Value String JoinType Type of join SchemaJoinType. SchemaJoinType JoinType { get; set; } Property Value SchemaJoinType Type of join KeyField Key field name of the main object. string KeyField { get; set; } Property Value String Key field name of the main object"
  },
  "api/OrpheusInterfaces.Schema.ISchemaObject.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaObject.html",
    "title": "Interface ISchemaObject | Orpheus",
    "keywords": "Interface ISchemaObject Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Base schema object interface. public interface ISchemaObject Properties Action Defines the DDL action to be taken when schema objects are executed. DDLAction Action { get; set; } Property Value DDLAction Defines the DDL action to be taken when schema objects are executed AliasName The schema object alias name. string AliasName { get; set; } Property Value String IsCreated True if the schema object is created in the DB. bool IsCreated { get; } Property Value Boolean True if the schema object is created in the DB RawDDL If DDL is set all other fields and join schema objects are ignored. Dependencies still apply. string RawDDL { get; set; } Property Value String Set raw DDL for the schema object Schema Schema where the schema object belongs to. ISchema Schema { get; set; } Property Value ISchema Schema where the schema object exists SchemaObjectsThatDependOnMe Other schema objects that depend on this object. First it will iterate through the dependency list and run any schema object that is not yet destroyed. List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value List<ISchemaObject> Schema objects that depend on this object SchemaObjectsThatIDepend Other schema objects that this object depends upon. First it will iterate through the dependency list and run any schema object that is not yet created. List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value List<ISchemaObject> Schema object that this object depends upon SQLName The name of the schema object. Could be the name of a table or a view or a stored procedure. string SQLName { get; set; } Property Value String SQL name of the schema object UniqueKey Unique generated when the object is created and saved in the DB. Guid UniqueKey { get; set; } Property Value Guid Schema object unique key Methods AddDependency(ISchemaObject) Adds a dependency to a schema object. void AddDependency(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject AddDependency(Type) Adds a dependency to a schema object based on the model type. void AddDependency(Type modelType) Parameters modelType Type AddDependency<T>() Adds a dependency to a schema object based on the model type. void AddDependency<T>() where T : class Type Parameters T Drop() Drops the schema object. void Drop() Execute() Executes schema object. void Execute() GetDDLString() Returns the DDL string to be executed. List<string> GetDDLString() Returns List<String> Get the generated DDL string for the schema object GetSchemaType() Gets the schema type. SchemaObjectType GetSchemaType() Returns SchemaObjectType Schema type"
  },
  "api/OrpheusInterfaces.Schema.ISchemaTable.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaTable.html",
    "title": "Interface ISchemaTable | Orpheus",
    "keywords": "Interface ISchemaTable Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Create table schema interface. public interface ISchemaTable : ISchemaDataObject, ISchemaObject Inherited Members ISchemaDataObject.GetConstraintsDDL() ISchemaDataObject.Fields ISchemaDataObject.Constraints ISchemaDataObject.SetData<T>(List<T>) ISchemaDataObject.GetData<T>() ISchemaDataObject.DB ISchemaDataObject.CreateFieldsFromModel(Object) ISchemaDataObject.CreateFieldsFromModel(Type) ISchemaDataObject.CreateFieldsFromModel<T>() ISchemaDataObject.AddField(String, String, Boolean, String, String, String) ISchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) ISchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) ISchemaDataObject.AddUniqueKeyConstraint(String, List<String>) ISchemaObject.SQLName ISchemaObject.RawDDL ISchemaObject.GetDDLString() ISchemaObject.Schema ISchemaObject.AddDependency(ISchemaObject) ISchemaObject.AddDependency(Type) ISchemaObject.AddDependency<T>() ISchemaObject.Execute() ISchemaObject.Drop() ISchemaObject.Action ISchemaObject.UniqueKey ISchemaObject.SchemaObjectsThatIDepend ISchemaObject.SchemaObjectsThatDependOnMe ISchemaObject.GetSchemaType() ISchemaObject.IsCreated ISchemaObject.AliasName Properties JoinDefinition Join definition. Defines how schema objects can be joined. ISchemaJoinDefinition JoinDefinition { get; set; } Property Value ISchemaJoinDefinition Join definition"
  },
  "api/OrpheusInterfaces.Schema.ISchemaView.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaView.html",
    "title": "Interface ISchemaView | Orpheus",
    "keywords": "Interface ISchemaView Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Create view schema object. public interface ISchemaView : ISchemaDataObject, ISchemaObject Inherited Members ISchemaDataObject.GetConstraintsDDL() ISchemaDataObject.Fields ISchemaDataObject.Constraints ISchemaDataObject.SetData<T>(List<T>) ISchemaDataObject.GetData<T>() ISchemaDataObject.DB ISchemaDataObject.CreateFieldsFromModel(Object) ISchemaDataObject.CreateFieldsFromModel(Type) ISchemaDataObject.CreateFieldsFromModel<T>() ISchemaDataObject.AddField(String, String, Boolean, String, String, String) ISchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) ISchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) ISchemaDataObject.AddUniqueKeyConstraint(String, List<String>) ISchemaObject.SQLName ISchemaObject.RawDDL ISchemaObject.GetDDLString() ISchemaObject.Schema ISchemaObject.AddDependency(ISchemaObject) ISchemaObject.AddDependency(Type) ISchemaObject.AddDependency<T>() ISchemaObject.Execute() ISchemaObject.Drop() ISchemaObject.Action ISchemaObject.UniqueKey ISchemaObject.SchemaObjectsThatIDepend ISchemaObject.SchemaObjectsThatDependOnMe ISchemaObject.GetSchemaType() ISchemaObject.IsCreated ISchemaObject.AliasName Properties JoinSchemaObjects Join schema objects. Applicable mostly when schema object is a table or a view. List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value List<ISchemaTable> Schema objects in the schema view TableName Applicable only when DDLCommand = ddcCreateView. string TableName { get; set; } Property Value String Table name WithSchemaBinding SQL server specific option, to create views with schema binding, in order to be able to create indexes on the view itself. bool WithSchemaBinding { get; set; } Property Value Boolean Methods FormattedTableName() Returns the main table name, SQL formatted, with a schema name, if the underlying db engine supports it, and with the table alias, if defined. string FormattedTableName() Returns String"
  },
  "api/OrpheusInterfaces.Schema.ISchemaViewTable.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaViewTable.html",
    "title": "Interface ISchemaViewTable | Orpheus",
    "keywords": "Interface ISchemaViewTable Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll A data table that is used in a View. public interface ISchemaViewTable : ISchemaTable, ISchemaDataObject, ISchemaObject Inherited Members ISchemaTable.JoinDefinition ISchemaDataObject.GetConstraintsDDL() ISchemaDataObject.Fields ISchemaDataObject.Constraints ISchemaDataObject.SetData<T>(List<T>) ISchemaDataObject.GetData<T>() ISchemaDataObject.DB ISchemaDataObject.CreateFieldsFromModel(Object) ISchemaDataObject.CreateFieldsFromModel(Type) ISchemaDataObject.CreateFieldsFromModel<T>() ISchemaDataObject.AddField(String, String, Boolean, String, String, String) ISchemaDataObject.AddPrimaryKeyConstraint(String, List<String>, SchemaSort) ISchemaDataObject.AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) ISchemaDataObject.AddUniqueKeyConstraint(String, List<String>) ISchemaObject.SQLName ISchemaObject.RawDDL ISchemaObject.GetDDLString() ISchemaObject.Schema ISchemaObject.AddDependency(ISchemaObject) ISchemaObject.AddDependency(Type) ISchemaObject.AddDependency<T>() ISchemaObject.Execute() ISchemaObject.Drop() ISchemaObject.Action ISchemaObject.UniqueKey ISchemaObject.SchemaObjectsThatIDepend ISchemaObject.SchemaObjectsThatDependOnMe ISchemaObject.GetSchemaType() ISchemaObject.IsCreated ISchemaObject.AliasName Properties SchemaName Override for a table's schema name. string SchemaName { get; set; } Property Value String"
  },
  "api/OrpheusInterfaces.Schema.IUniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IUniqueKeySchemaConstraint.html",
    "title": "Interface IUniqueKeySchemaConstraint | Orpheus",
    "keywords": "Interface IUniqueKeySchemaConstraint Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll A unique key constraint. public interface IUniqueKeySchemaConstraint : ISchemaConstraint Inherited Members ISchemaConstraint.Name ISchemaConstraint.Fields ISchemaConstraint.Sort ISchemaConstraint.SQL() ISchemaConstraint.Action ISchemaConstraint.SchemaObject ISchemaConstraint.ConstraintSQLCommand"
  },
  "api/OrpheusInterfaces.Schema.SchemaJoinOperator.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaJoinOperator.html",
    "title": "Enum SchemaJoinOperator | Orpheus",
    "keywords": "Enum SchemaJoinOperator Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Join operator type. public enum SchemaJoinOperator Fields joEquals = 0 Equals. joNotEquals = 1 Not equals."
  },
  "api/OrpheusInterfaces.Schema.SchemaJoinType.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaJoinType.html",
    "title": "Enum SchemaJoinType | Orpheus",
    "keywords": "Enum SchemaJoinType Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Schema join types. public enum SchemaJoinType Fields jtInner = 2 Inner join. jtLeftInner = 1 Left inner join. jtLeftOuter = 0 Left out join jtRightInner = 4 Right inner join. jtRightOuter = 3 Right outer join."
  },
  "api/OrpheusInterfaces.Schema.SchemaObjectType.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaObjectType.html",
    "title": "Enum SchemaObjectType | Orpheus",
    "keywords": "Enum SchemaObjectType Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Type of a schema object. public enum SchemaObjectType Fields sotTable = 1 Table. sotUniqueIndex = 3 Unique index sotUnknown = 0 Unknown type. This is the default. sotView = 2 View."
  },
  "api/OrpheusInterfaces.Schema.SchemaSort.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaSort.html",
    "title": "Enum SchemaSort | Orpheus",
    "keywords": "Enum SchemaSort Namespace OrpheusInterfaces.Schema Assembly OrpheusInterfaces.dll Schema sort type. public enum SchemaSort Fields ssAsc = 0 Sort ascending. ssDesc = 1 Sort descending."
  },
  "api/OrpheusInterfaces.Schema.html": {
    "href": "api/OrpheusInterfaces.Schema.html",
    "title": "Namespace OrpheusInterfaces.Schema | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Schema Interfaces IForeignKeySchemaConstraint A foreign key constraint. IPrimaryKeySchemaConstraint A primary key constraint. ISchema Represents an Orpheus Schema. ISchemaConstraint Represents a schema constraint. ISchemaDataObject Base schema data object interface. ISchemaField Represents a schema field. ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. ISchemaObject Base schema object interface. ISchemaTable Create table schema interface. ISchemaView Create view schema object. ISchemaViewTable A data table that is used in a View. IUniqueKeySchemaConstraint A unique key constraint. Enums DDLAction DDL action. SchemaJoinOperator Join operator type. SchemaJoinType Schema join types. SchemaObjectType Type of a schema object. SchemaSort Schema sort type."
  },
  "api/OrpheusMySQLDDLHelper.OrpheusMySQLServerDDLHelper.html": {
    "href": "api/OrpheusMySQLDDLHelper.OrpheusMySQLServerDDLHelper.html",
    "title": "Class OrpheusMySQLServerDDLHelper | Orpheus",
    "keywords": "Class OrpheusMySQLServerDDLHelper Namespace OrpheusMySQLDDLHelper Assembly OrpheusMySQLDDLHelper.dll MySQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. public class OrpheusMySQLServerDDLHelper : IMySQLServerDDLHelper, IOrpheusDDLHelper Inheritance Object OrpheusMySQLServerDDLHelper Implements IMySQLServerDDLHelper IOrpheusDDLHelper Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusMySQLServerDDLHelper() MySQL Server DDL helper constructor. public OrpheusMySQLServerDDLHelper() Properties ConnectionString Builds the connection string. public string ConnectionString { get; } Property Value String DatabaseName Gets the database name. public string DatabaseName { get; } Property Value String DB Database for the DDL helper. public IOrpheusDatabase DB { get; set; } Property Value IOrpheusDatabase Database the helper is associated with DbEngineType Returns the underlying database engine type. public DatabaseEngineType DbEngineType { get; } Property Value DatabaseEngineType DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. public char DelimitedIndetifierEnd { get; } Property Value Char Char DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. public char DelimitedIndetifierStart { get; } Property Value Char Char ModifyColumnCommand Returns the DB specific modify table command. public string ModifyColumnCommand { get; } Property Value String SSLMode SSL connection mode. public string SSLMode { get; set; } Property Value String SupportsGuidType Returns true if the DBEngine supports natively the Guid type. public bool SupportsGuidType { get; } Property Value Boolean True if the DBEngine supports natively the Guid type SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. public bool SupportsSchemaNameSpace { get; } Property Value Boolean Methods CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. public bool CreateDatabase() Returns Boolean True if database was created successfully CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. public bool CreateDatabase(string dbName) Parameters dbName String Database name Returns Boolean True if the database was created successfully CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. public bool CreateDatabaseWithDDL(string ddlString) Parameters ddlString String DDL command Returns Boolean True if the database was created successfully DatabaseExists(String) Returns true the database exists. public bool DatabaseExists(string dbName) Parameters dbName String Database name Returns Boolean True if the database exists DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. public string DbTypeToString(DbType dataType) Parameters dataType DbType DbType Returns String String value for the DbType SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. public string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters tableName String Table's name that schema is going to change columnsToAdd List<String> Columns for creation Returns String SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. public string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters tableName String Table's name that schema is going to change columnsToDelete List<String> Columns for deletion Returns String SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. public string SafeFormatField(string fieldName) Parameters fieldName String Returns String SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. public bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters schemaConstraint ISchemaConstraint Returns Boolean SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. public bool SchemaObjectExists(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Returns Boolean SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. public bool SchemaObjectExists(string schemaObjectName) Parameters schemaObjectName String Schema object name Returns Boolean True if the object exists SchemaObjectId<T>(ISchemaObject) Gets the schema object, db engine assigned/generated, identifier. public T SchemaObjectId<T>(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject The schema object. Returns T Type Parameters T TypeToString(Type) Returns the db engine specific string equivalent, for a .net type public string TypeToString(Type type) Parameters type Type Type Returns String String value for the mapped DbType"
  },
  "api/OrpheusMySQLDDLHelper.html": {
    "href": "api/OrpheusMySQLDDLHelper.html",
    "title": "Namespace OrpheusMySQLDDLHelper | Orpheus",
    "keywords": "Namespace OrpheusMySQLDDLHelper Classes OrpheusMySQLServerDDLHelper MySQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands."
  },
  "api/OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper.html": {
    "href": "api/OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper.html",
    "title": "Class OrpheusSQLServerDDLHelper | Orpheus",
    "keywords": "Class OrpheusSQLServerDDLHelper Namespace OrpheusSQLDDLHelper Assembly OrpheusSQLServerDDLHelper.dll SQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. public class OrpheusSQLServerDDLHelper : ISQLServerDDLHelper, IOrpheusDDLHelper Inheritance Object OrpheusSQLServerDDLHelper Implements ISQLServerDDLHelper IOrpheusDDLHelper Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors OrpheusSQLServerDDLHelper() public OrpheusSQLServerDDLHelper() Properties ConnectionString Builds the connection string. public string ConnectionString { get; } Property Value String DatabaseName Gets the database name. public string DatabaseName { get; } Property Value String DB Database for the DDL helper. public IOrpheusDatabase DB { get; set; } Property Value IOrpheusDatabase Database the helper is associated with DbEngineType Returns the underlying database engine type. public DatabaseEngineType DbEngineType { get; } Property Value DatabaseEngineType DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. public char DelimitedIndetifierEnd { get; } Property Value Char Char DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. public char DelimitedIndetifierStart { get; } Property Value Char Char ModifyColumnCommand Returns the DB specific modify table command. public string ModifyColumnCommand { get; } Property Value String SchemaSeparator Schema separator. Char that separates the schema name and the schema object. By default in SQL server, the separator is the dot char. public string SchemaSeparator { get; } Property Value String SupportsGuidType Returns true if the DBEngine supports natively the Guid type. public bool SupportsGuidType { get; } Property Value Boolean True if the DBEngine supports natively the Guid type SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. public bool SupportsSchemaNameSpace { get; } Property Value Boolean Methods AddDatabaseRoleMember(String, String) Adds a database user to the specified role. public void AddDatabaseRoleMember(string roleName, string userName) Parameters roleName String userName String ChangeDatabaseUserPassword(String, String, String) Changes the password for an existing user. public void ChangeDatabaseUserPassword(string userName, string oldPassword, string newPassword) Parameters userName String oldPassword String newPassword String CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. public bool CreateDatabase() Returns Boolean True if database was created successfully CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. public bool CreateDatabase(string dbName) Parameters dbName String Database name Returns Boolean True if the database was created successfully CreateDatabaseRole(String, String) Creates a database role. public void CreateDatabaseRole(string roleName, string owner = null) Parameters roleName String owner String CreateDatabaseUser(String, String) Creates a contained database user. public void CreateDatabaseUser(string userName, string password) Parameters userName String password String CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. public bool CreateDatabaseWithDDL(string ddlString) Parameters ddlString String DDL command Returns Boolean True if the database was created successfully CreateSchema(String) Creates a schema. public void CreateSchema(string schemaName) Parameters schemaName String DatabaseExists(String) Returns true the database exists. public bool DatabaseExists(string dbName) Parameters dbName String Database name Returns Boolean True if the database exists DatabaseRoleExists(String) Returns true if the database role exists. public bool DatabaseRoleExists(string roleName) Parameters roleName String Returns Boolean DatabaseUserExists(String) Returns true if a database user exists. public bool DatabaseUserExists(string userName) Parameters userName String Returns Boolean DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. public string DbTypeToString(DbType dataType) Parameters dataType DbType DbType Returns String String value for the DbType Deny(List<String>, String) Deny permissions to a database principal. public void Deny(List<string> permissions, string databasePrincipal) Parameters permissions List<String> databasePrincipal String Deny(String, String) Deny permission to a database principal. public void Deny(string permission, string databasePrincipal) Parameters permission String databasePrincipal String Deny(String, String, String) Denies permission to a database principal for a specific schema object. public void Deny(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String DropDatabaseRole(String) Drops a database role. public void DropDatabaseRole(string roleName) Parameters roleName String DropDatabaseRoleMember(String, String) Drops a database user to the specified role. public void DropDatabaseRoleMember(string roleName, string userName) Parameters roleName String userName String DropDatabaseUser(String) Drops a user. public void DropDatabaseUser(string userName) Parameters userName String DropSchema(String) Drops a schema. public void DropSchema(string schemaName) Parameters schemaName String EnableContainedDatabases(Boolean) Enables/disables the contained database feature on the SQL server instance. A feature supported from SQL server 2012 and later. public void EnableContainedDatabases(bool enable) Parameters enable Boolean Grant(List<String>, String) Grants permission to a database principal. public void Grant(List<string> permissions, string databasePrincipal) Parameters permissions List<String> databasePrincipal String Grant(String, String) Grants permission to a database principal. public void Grant(string permission, string databasePrincipal) Parameters permission String databasePrincipal String Grant(String, String, String) Grants permission to a database principal for a specific schema object. public void Grant(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String Revoke(List<String>, String, String) Revokes permissions for a database principal. public void Revoke(List<string> permissions, string schemaObject, string databasePrincipal) Parameters permissions List<String> schemaObject String databasePrincipal String Revoke(String, String, String) Revokes permission for a database principal. public void Revoke(string permission, string schemaObject, string databasePrincipal) Parameters permission String schemaObject String databasePrincipal String SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. public string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters tableName String Table's name that schema is going to change columnsToAdd List<String> Columns for creation Returns String SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. public string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters tableName String Table's name that schema is going to change columnsToDelete List<String> Columns for deletion Returns String SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. public string SafeFormatField(string fieldName) Parameters fieldName String Returns String SchemaExists(String) Returns true if the schema exists. public bool SchemaExists(string schemaName) Parameters schemaName String Returns Boolean SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. public bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters schemaConstraint ISchemaConstraint Returns Boolean SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. public bool SchemaObjectExists(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject Schema object Returns Boolean True if the object exists SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. public bool SchemaObjectExists(string schemaObjectName) Parameters schemaObjectName String Returns Boolean SchemaObjectExists(String, String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. public bool SchemaObjectExists(string schemaObjectName, string schemaName = null) Parameters schemaObjectName String schemaName String Returns Boolean SchemaObjectId<T>(ISchemaObject) Gets the schema object, db engine assigned/generated, identifier. public T SchemaObjectId<T>(ISchemaObject schemaObject) Parameters schemaObject ISchemaObject The schema object. Returns T Type Parameters T SetDatabaseContainment(String, String) Sets the containment option for a database. public void SetDatabaseContainment(string containment, string databaseName = null) Parameters containment String Containment value. NONE or PARTIAL databaseName String TypeToString(Type) Returns the db engine specific string equivalent, for a .net type public string TypeToString(Type type) Parameters type Type Type Returns String String value for the mapped DbType"
  },
  "api/OrpheusSQLDDLHelper.html": {
    "href": "api/OrpheusSQLDDLHelper.html",
    "title": "Namespace OrpheusSQLDDLHelper | Orpheus",
    "keywords": "Namespace OrpheusSQLDDLHelper Classes OrpheusSQLServerDDLHelper SQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OrpheusORM Api Reference | Orpheus",
    "keywords": "OrpheusORM Api Reference Complete reference of all the classes/interfaces and methods of the OrpheusORM framework."
  },
  "documentation/benchmarks/orpheus_benchmarking_results_1.1.2.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.1.2.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 10 CPU I7 Database engine SQL Server Database engine location Local HDD type SSD RAM 8GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on October 14th 2017 Orpheus version 1.1.2 Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Gen 2 Allocated Insert10Rows 1.564 ms 1.666 ms 0.4328 ms 1.00 0.00 11.7188 5.8594 - 72.2 KB Insert100Rows 9.711 ms 3.261 ms 0.8470 ms 6.62 1.75 93.7500 46.8750 - 553.4 KB Insert1000Rows 92.750 ms 31.579 ms 8.2026 ms 63.21 16.78 875.0000 250.0000 125.0000 5391.61 KB Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Scaled ScaledSD Gen 0 Allocated Load50RowsOneAtATime 4.804 ms 1.870 ms 0.4856 ms 1.00 0.00 156.2500 333.16 KB Load500RowsOneAtATime 44.574 ms 5.552 ms 1.4420 ms 9.35 0.86 1625.0000 3331.54 KB Load5000RowsOneAtATime 456.932 ms 86.088 ms 22.3610 ms 95.87 9.36 16250.0000 33315.86 KB Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Update10Rows 14.27 ms 13.302 ms 3.4551 ms 1.00 0.00 93.7500 46.8750 578.02 KB Update100Rows 13.31 ms 2.445 ms 0.6352 ms 0.97 0.16 93.7500 46.8750 578.02 KB Update1000Rows 130.70 ms 15.357 ms 3.9890 ms 9.50 1.59 1000.0000 250.0000 5592.98 KB Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Delete10Rows 11.22 ms 7.682 ms 1.995 ms 1.00 0.00 - - 25.96 KB Delete100Rows 121.19 ms 32.724 ms 8.500 ms 11.04 1.68 125.0000 - 277.24 KB Delete1000Rows 890.56 ms 139.418 ms 36.213 ms 81.14 11.60 750.0000 250.0000 2578.13 KB Legend Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Scaled : Mean(CurrentBenchmark) / Mean(BaselineBenchmark) ScaledSD : Standard deviation of ratio of distribution of [CurrentBenchmark] and [BaselineBenchmark] Gen 0 : GC Generation 0 collects per 1k Operations Gen 1 : GC Generation 1 collects per 1k Operations Allocated: Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ms : 1 Millisecond (0.001 sec)"
  },
  "documentation/benchmarks/orpheus_benchmarking_results_1.1.3.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.1.3.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 10 CPU I7 Database engine SQL Server Database engine location Local HDD type SSD RAM 16GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on September 24th 2018 Orpheus version 1.1.3 Runtime .NET Core 2.0.0 (CoreCLR 4.6.00001.0, CoreFX 4.6.25519.03), 64bit RyuJIT Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Insert10Rows 1.056 ms 0.0789 ms 0.0659 ms 1.00 0.00 31.2500 - 65.78 KB Insert100Rows 7.785 ms 0.5106 ms 0.4776 ms 7.40 0.59 234.3750 - 491.71 KB Insert1000Rows 74.869 ms 3.0477 ms 2.8508 ms 71.16 4.65 1000.0000 285.7143 4750.32 KB Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Scaled ScaledSD Gen 0 Allocated Load50RowsOneAtATime 4.160 ms 0.1161 ms 0.1029 ms 1.00 0.00 171.8750 360.12 KB Load500RowsOneAtATime 41.372 ms 1.2365 ms 1.1566 ms 9.95 0.36 1692.3077 3601.18 KB Load5000RowsOneAtATime 418.364 ms 10.0790 ms 8.9347 ms 100.62 3.18 17500.0000 36009.47 KB Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Update10Rows 11.83 ms 1.2164 ms 1.0783 ms 1.00 0.00 218.7500 - 469.54 KB Update100Rows 11.57 ms 0.7881 ms 0.7372 ms 0.98 0.10 218.7500 - 469.54 KB Update1000Rows 112.65 ms 4.0897 ms 3.4151 ms 9.59 0.84 1000.0000 400.0000 4695.44 KB Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Delete10Rows 690.5 us 7.412 us 5.787 us 1.00 0.00 7.8125 - 17.01 KB Delete100Rows 6,057.5 us 133.745 us 111.683 us 8.77 0.17 78.1250 - 163.27 KB Delete1000Rows 59,989.5 us 874.615 us 730.343 us 86.88 1.23 444.4444 111.1111 1625.84 KB Legend Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Scaled : Mean(CurrentBenchmark) / Mean(BaselineBenchmark) ScaledSD : Standard deviation of ratio of distribution of [CurrentBenchmark] and [BaselineBenchmark] Gen 0 : GC Generation 0 collects per 1k Operations Gen 1 : GC Generation 1 collects per 1k Operations Allocated: Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ms : 1 Millisecond (0.001 sec) 1 us : 1 Microsecond (0.000001 sec)"
  },
  "documentation/benchmarks/orpheus_benchmarking_results_1.3.0.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.3.0.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 11 CPU AMD Ryzen 5 5500U Database engine SQL Server Database engine location Local HDD type SSD RAM 16GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on September 10th 2023 Orpheus version 1.3.0 Runtime BenchmarkDotNet v0.13.8, Windows 11 (10.0.22621.1992/22H2/2022Update/SunValley2) .NET SDK 7.0.400 Job-DJWJHC : .NET 7.0.10 (7.0.1023.36312), X64 RyuJIT AVX2 Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Ratio RatioSD Gen0 Gen1 Allocated Alloc Ratio Insert10Rows 1.081 ms 0.0391 ms 0.0366 ms 1.00 0.00 25.3906 - 54.65 KB 1.00 Insert100Rows 9.139 ms 0.5144 ms 0.4812 ms 8.45 0.32 187.5000 - 399.32 KB 7.31 Insert1000Rows 87.707 ms 2.0864 ms 1.9516 ms 81.21 2.53 666.6667 500.0000 3844.32 KB 70.35 Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Ratio RatioSD Gen0 Allocated Alloc Ratio Load50RowsOneAtATime 4.055 ms 0.1247 ms 0.1166 ms 1.00 0.00 125.0000 256.39 KB 1.00 Load500RowsOneAtATime 41.018 ms 1.6845 ms 1.5756 ms 10.12 0.46 1230.7692 2563.92 KB 10.00 Load5000RowsOneAtATime 390.491 ms 8.6642 ms 7.6806 ms 96.05 3.17 12500.0000 25639.05 KB 100.00 Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Ratio RatioSD Gen0 Gen1 Allocated Alloc Ratio Update10Rows 10.98 ms 0.402 ms 0.357 ms 1.00 0.00 171.8750 - 377.11 KB 1.00 Update100Rows 11.19 ms 0.647 ms 0.605 ms 1.02 0.06 171.8750 - 377.11 KB 1.00 Update1000Rows 110.83 ms 3.419 ms 2.855 ms 10.09 0.46 600.0000 400.0000 3766.46 KB 9.99 Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Ratio RatioSD Gen0 Allocated Alloc Ratio Delete10Rows 792.8 ?s 3.70 ?s 3.46 ?s 1.00 0.00 3.9063 9.57 KB 1.00 Delete100Rows 7,144.7 ?s 141.73 ?s 125.64 ?s 9.02 0.15 39.0625 91.15 KB 9.52 Delete1000Rows 68,439.7 ?s 978.96 ?s 867.82 ?s 86.38 1.14 142.8571 906.95 KB 94.75"
  },
  "documentation/benchmarks/orpheus_benchmarking_results_1.4.0.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.4.0.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 11 CPU AMD Ryzen 5 5500U 1 CPU, 12 logical 6 physical Database engine SQL Server Database engine location Local HDD type SSD RAM 16GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on November 21st 2024 Orpheus version 1.4.0 Runtime BenchmarkDotNet v0.13.8, Windows 11 (10.0.22631.4460) .NET SDK 8.0.202 Job-KCZQOK : .NET 8.0.3 (8.0.324.11423), X64 RyuJIT AVX2 Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Ratio RatioSD Gen0 Gen1 Allocated Alloc Ratio Insert10Rows 1.291 ms 0.0742 ms 0.0694 ms 1.00 0.00 23.4375 - 52.96 KB 1.00 Insert100Rows 9.811 ms 0.7585 ms 0.7095 ms 7.63 0.81 171.8750 - 365.26 KB 6.90 Insert1000Rows 94.304 ms 4.6471 ms 4.3469 ms 73.28 5.69 666.6667 333.3333 3574.1 KB 67.48 Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Ratio RatioSD Gen0 Allocated Alloc Ratio Load50RowsOneAtATime 4.517 ms 0.0219 ms 0.0205 ms 1.00 0.00 117.1875 254.07 KB 1.00 Load500RowsOneAtATime 42.527 ms 0.1537 ms 0.1362 ms 9.41 0.05 1230.7692 2540.65 KB 10.00 Load5000RowsOneAtATime 433.219 ms 17.0756 ms 15.9725 ms 95.90 3.47 12250.0000 25406.77 KB 100.00 Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Ratio RatioSD Gen0 Gen1 Allocated Alloc Ratio Update10Rows 13.14 ms 0.654 ms 0.612 ms 1.00 0.00 156.2500 - 345.05 KB 1.00 Update100Rows 11.98 ms 0.343 ms 0.321 ms 0.91 0.04 156.2500 - 345.05 KB 1.00 Update1000Rows 119.99 ms 3.536 ms 3.307 ms 9.15 0.51 500.0000 250.0000 3446.09 KB 9.99 Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Ratio RatioSD Gen0 Allocated Alloc Ratio Delete10Rows 937.7 μs 16.89 μs 15.80 μs 1.00 0.00 3.9063 8.68 KB 1.00 Delete100Rows 7,720.3 μs 360.45 μs 337.17 μs 8.23 0.35 31.2500 82.53 KB 9.51 Delete1000Rows 77,875.9 μs 338.68 μs 316.80 μs 83.07 1.34 142.8571 820.94 KB 94.56"
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "What is Orpheus | Orpheus",
    "keywords": "What is Orpheus Orpheus is a hybrid ORM. Somewhere between a micro-orm like Dapper or PetaPoco and a full scale ORM like EntityFramework. It supports decorated models and has a code-first schema generation engine, but that's optional. You don't have to use that, to use Orpheus. You can drop it on a project and use it as you would any of the other micro-orms. It's easy to use and very flexible on configuring, as all of its configuration is in a file. Here is a quick example on how to create an entity. var usersTable = this.Database.CreateTable<TestModelUser>(); usersTable.Add(new TestModelUser() { UserId = Guid.NewGuid(), UserName = \"Admin\", PasswordHash = \"!@##%$#%$%#DFSDasdf43w3re\", PasswordSalt = \"$%TG*(sdfsfr687\", Email = admin@test.com, Active = 1, UserProfileId = Guid.Parse(\"3C9EA0CB-885E-476F-A919-6E97484CE633\"), UserGroupId = Guid.Parse(\"ABA227B9-1E82-4FFB-9A50-94AED2D41869\") }); usersTable.Save(); or deleting an entity var usersTable = this.Database.CreateTable<TestModelUser>(); usersTable.Delete(new TestModelUser() { UserId = Guid.Parse(\"86AFD459-ABCB-4623-B375-AA82F8B36590\"), }); usersTable.Save(); Orpheus Documentation Here you can find information regarding the key/core class of OrpheusORM, understand their purpose and how to use them. Orpheus Table Orpheus Module Orpheus DI Configuration Orpheus DDL Helper"
  },
  "documentation/orpheus_and_di.html": {
    "href": "documentation/orpheus_and_di.html",
    "title": "Orpheus and DI | Orpheus",
    "keywords": "Orpheus and DI One of the first things that need to happen in an OrpheusORM application, is to initialize Orpheus's configuration. Why use DI? The reason for using an IoC container, is configurability and extensibility. Having all the configuration in a file, the consumer can define the database engine of his choosing as long as it implements System.Data.IDbConnection, or a different logger component as long as it implements Microsoft.Extensions.Logging.ILogger. Note: At the moment only SQL Server and MySQL have been tested. Other DB engines might work, but there is no guarantee. Read about Microsoft's DI here Agnostic Database Engine By design Orpheus, does not depend nor include any code that targets specifically a database engine. This means that the consumer will need to somehow configure, which database engine will Orpheus target. Here comes into play Orpheus's configuration. Either by file or by code, you can define the database engine for Orpheus. Configuration by file One easy way to configure Orpheus is by using a configuration file. The configuration file, is basically a JSON file that has the DI configuration for Orpheus. To initialize the configuration you can use the Orpheus configuration object. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(IConfiguration configuration, IServiceCollection services = null); If no services are defined, then Orpheus will be in self-service mode. This means that it will create its own service collection and register all required services there. Alternatively you can define a file name. This will implicitly set Orpheus to self-service mode. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(\"MyPath\\appSettings.json\"); Note: You don't have to have a separate file for Orpheus's configuration. Its configuration can live inside your existing configuration file. Configuration Sample { \"Services\": [ { \"Implementation\": \"System.Data.SqlClient.SqlConnection, System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"Service\": \"System.Data.IDbConnection, System.Data.Common, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"ServiceLifeTime\": \"Transient\" }, { \"Implementation\": \"OrpheusCore.OrpheusDatabase, OrpheusCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"Service\": \"OrpheusInterfaces.Core.IOrpheusDatabase, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"ServiceLifeTime\": \"Transient\" }, { \"Implementation\": \"OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper, OrpheusSQLServerDDLHelper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"Service\": \"OrpheusInterfaces.Core.IOrpheusDDLHelper, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"ServiceLifeTime\": \"Transient\" } ], \"DatabaseConnection\": { \"ConfigurationName\": \"ServiceConnection\", \"Server\": \"[YourServer]\", \"DatabaseName\": \"[YourDatabase]\", \"UseIntegratedSecurity\": true } }"
  },
  "documentation/orpheus_configuring_nlog.html": {
    "href": "documentation/orpheus_configuring_nlog.html",
    "title": "Configuring NLog | Orpheus",
    "keywords": "Configuring NLog Here is an example of how to configure NLog with Orpheus. Prerequisite is to add NLog to your project. LogManager.LoadConfiguration(\"nlog.config\"); var logger = LogManager.GetCurrentClassLogger(); try { IServiceCollection serviceCollection = new ServiceCollection(); this.configuration = this.createConfiguration(\"appSettings.json\"); serviceCollection.AddLogging((builder) => { builder.ClearProviders(); //setting the MEL minimum level to trace, will essentially cancel whatever logging settings might present in the appsettings.json file //the logging level would be controlled solely from the NLog configuration file. builder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace); builder.AddNLog(configuration); }); OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(this.configuration, serviceCollection); } catch (Exception e) { logger.Log(NLog.LogLevel.Error, e); } Other logging frameworks, might require a similar approach."
  },
  "documentation/orpheus_connecting_to_db.html": {
    "href": "documentation/orpheus_connecting_to_db.html",
    "title": "Connecting to a database | Orpheus",
    "keywords": "Connecting to a database With Orpheus you can multiple connections to a different (or the same) database, at the same time. You can configure multiple database connections, in the configuration file. Consider having the following configuration \"DatabaseConnections\": [ { \"ConfigurationName\": \"Database1\", \"Server\": \"Server1\", \"DatabaseName\": \"Database1\", \"UseIntegratedSecurity\": false, \"UseIntegratedSecurityForServiceConnection\": false, \"ServiceUserName\": \"[yourusername]\", \"ServicePassword\": \"[yourpassword]\" }, { \"ConfigurationName\": \"Database2\", \"Server\": \"Server2\", \"DatabaseName\": \"Database2\", \"UseIntegratedSecurity\": false, \"UseIntegratedSecurityForServiceConnection\": false, \"ServiceUserName\": \"[yourusername]\", \"ServicePassword\": \"[yourpassword]\", \"UserName\": \"[yourusername]\", \"Password\": \"[yourpassword]\" } ], First let's load the configuration //creating an IConfiguration to pass it on to Orpheus. var configurationBuilder = new ConfigurationBuilder(); configurationBuilder.SetBasePath(\"YourPathHere\"); configurationBuilder.AddJsonFile(\"appSettings.json\", optional: false, reloadOnChange: true); this.configuration = configurationBuilder.Build(); OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(this.configuration); //creating a database to connect to server1/database1 var database1 = OrpheusCore.ServiceProvider.OrpheusServiceProvider.Resolve<IOrpheusDatabase>(); var dbConfiguration = OrpheusCore.Configuration.ConfigurationManager.Configuration.DatabaseConnections.FirstOrDefault(c => c.ConfigurationName.ToLower() == \"database1\"); database1.Connect(dbConfiguration); //creating a database to connect to server2/database2 var database2 = OrpheusCore.ServiceProvider.OrpheusServiceProvider.Resolve<IOrpheusDatabase>(); var dbConfiguration = OrpheusCore.Configuration.ConfigurationManager.Configuration.DatabaseConnections.FirstOrDefault(c => c.ConfigurationName.ToLower() == \"database2\"); database2.Connect(dbConfiguration); For more details on each configuration option go to Database Connection Configuration"
  },
  "documentation/orpheus_creating_schema.html": {
    "href": "documentation/orpheus_creating_schema.html",
    "title": "Creating your schema | Orpheus",
    "keywords": "Creating your schema Orpheus has a built-in schema generator engine, that you can use to create the database schema for your application. It's not mandatory to use it, in order to use Orpheus, but if you are starting a new project, you might find it useful. Schema Creation Options In the ORM frameworks world, there are a few different options. Here are a couple of the main ones. Database First Where the ORM reads your database and generates the models. Code First Where you write your models and the ORM creates the schema for you. Orpheus supports the second option, where you write up your models and decorate them accordingly based on your needs. Decorating your classes with schema attributes There are plenty of attributes that you can use to decorate your classes and/or properties. Have a look at Orpheus Attributes But let's highlight some common usage scenarios. Foreign Key /// <summary> /// Foreign key attribute constructor. /// </summary> /// <param name=\"referenceTable\">The referenced table name</param> /// <param name=\"referenceField\">The referenced field name</param> /// <param name=\"onDeleteCascade\">Delete cascade flag</param> /// <param name=\"onUpdateCascade\">Update cascade flag</param> public ForeignKey(string referenceTable, string referenceField,bool onDeleteCascade = false, bool onUpdateCascade = false) Here is an invoice model, that depends on multiple different models. Shipping type, payment method etc. /// <summary> /// A class that represents an \"Invoice\" entity. /// </summary> public class Invoice { /// <summary> /// If the invoice created is a transformation of another invoice. /// This will help traceability. /// </summary> [ForeignKey(\"Invoice\",\"Id\")] public Guid? OriginalInvoice { get; set; } /// <summary> /// Invoice type id. /// </summary> [ForeignKey(\"InvoiceType\",\"Id\")] public Guid InvoiceTypeId { get; set; } /// <summary> /// Invoice's transactor. /// </summary> [ForeignKey(\"Transactor\",\"Id\")] public Guid TransactorId { get; set; } /// <summary> /// Fiscal year where the invoice belongs to. /// </summary> [ForeignKey(\"FiscalYear\",\"Id\")] public Guid FiscalYearId { get; set; } /// <summary> /// Invoice's shipping method. /// </summary> [ForeignKey(\"ShippingMethod\",\"Id\")] public Guid ShippingMethodId { get; set; } /// <summary> /// Invoice's payment method. /// </summary> [ForeignKey(\"PaymentMethod\",\"Id\")] public Guid PaymentMethodId { get; set; } /// <summary> /// Invoice's date and time. /// </summary> public DateTime InvoiceDate { get; set; } .... Composite Primary/Unique Key A composite primary/unique key is a key that is comprised from more than one fields. /// <summary> /// Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. /// </summary> public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute { /// <summary> /// Primary composite key. /// </summary> /// <param name=\"fields\">Fields that are part of the key</param> /// <param name=\"sort\">Sort direction</param> public UniqueCompositeKey(string[] fields,string sort = null) : base(fields) { } } In the following example, an attribute can only be associated with only one attribute group. /// <summary> /// Class that represents an attribute. An attribute can be associated with only one attribute group. /// </summary> [UniqueCompositeKey(new string[] {\"Id\", \"AttributeGroupId\" })] public class Attribute { [ForeignKey(\"AttributeGroup\",\"Id\")] public Guid AttributeGroupId { get; set; } } Creating an Orpheus Schema You can use IOrpheusDatabase to create an ISchema object. /// <summary> /// Creates a schema object and sets it's database. /// </summary> /// <param name=\"id\">Schema id</param> /// <param name=\"description\">Schema description</param> /// <param name=\"version\">Schema version</param> /// <returns>An ISchema instance</returns> ISchema CreateSchema(Guid id, string description, double version); ISchema is the object were you have to register your models, that will eventually be your database schema. There are a couple of different ways to register a model into a schema, but the most straight forward one, is to register it via its type. /// <summary> /// Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"dependencies\"></param> /// <returns></returns> ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class; Here is an example Schema.AddSchemaTable<MercuryTransactor>(); There is built in support for dependencies between your models. So if your model has an \"Id\" reference to another, this will be translated into a foreign key constraint. In order for the Orpheus schema to be aware of that dependency you have to register it. So if your invoice table depends on the invoice type table, the code would like this. Schema.AddSchemaTable<InvoiceType>(); var invoice = this.schema.AddSchemaTable<Invoice>(); invoice.AddDependency<MercuryInvoiceType>(); After you have registered all your models, you need only to execute the schema. Schema.Execute(); This will iterate through the registered models, resolve the dependencies and create the database schema. Updating an existing schema Updating a schema, particularly a complex one, is always tricky. Orpheus's schema builder provides build-in support, for reconciling differences between your models and the corresponding tables. The preferred option would be, when you have a schema change, to instantiate a new ISchema and register only the models that have changes. This is definitely the most performant way to update your schema, using Orpheus, since only the models with the changes will be executed. An added benefit, is that you can keep a historic record of your schema changes. Alternatively you can always use the same ISchema object and just change your models that are already registered and Orpheus will reconcile field and constraint differences."
  },
  "documentation/orpheus_database_creation_flow.html": {
    "href": "documentation/orpheus_database_creation_flow.html",
    "title": "Database creation flow | Orpheus",
    "keywords": "Database creation flow Orpheus will try to create the database, that it's trying to connect to, if it doesn't exist. To do that, it will create a second connection, using the ServiceUserName/ServicePassword credentials to connect to the server. The account configured in ServiceUserName/ServicePassword must have database creation priviliges."
  },
  "documentation/orpheus_ddl_helper.html": {
    "href": "documentation/orpheus_ddl_helper.html",
    "title": "Orpheus DDL Helper | Orpheus",
    "keywords": "Orpheus DDL Helper Orpheus is database engine type agnostic. This means that it does not include any code targeting a specific database engine. Despite the fact, that SQL based database engines use the SQL language, there are differences between them. Here is where the IOrpheusDDLHelper comes into play. Every IOrpheusDatabase requires a IOrpheusDDLHelper. Orpheus provides out of the box, helpers for MS SQL and MySQL database engines. So what do these helpers do? As mentioned above, they reconcile differences between the different database engines. For example MS SQL natively supports the UID type while MySQL does not. The helper will give this kind of information to the IOrpheusDatabase. You can implement your own IOrpheusDDLHelper and register it in OrpheusORM. Implementing a custom IOrpheusDDLHelper Implementing your own DDLHelper is not a requirement. However if Orpheus does not provide one for you, for your database engine, it's quite easy to implement your own. All you have to do is to create a class that implements IOrpheusDDLHelper,implement your logic and register it in Orpheus. Here is how you can register a custom DDL helper."
  },
  "documentation/orpheus_module.html": {
    "href": "documentation/orpheus_module.html",
    "title": "Orpheus Module | Orpheus",
    "keywords": "Orpheus Module OrpheusModule class represents a logical division and grouping of a set of tables. For example you can have an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module will be saved as well. All master-detail relationships and keys will be updated automatically. Whats does the above mean exactly? You can use an OrpheusModule to logically group/divide your business logic. Using the example above, having an OrdersModule, you can have your bussiness logic for adding, updating and deleting orders in one place. The OrpheusModule will manage for you, the master-detail relationships in your module. For example an OrderLine must always have an OrderId. If you were to use separate tables to achieve the same functionality, you would have to enter and synchronize the master-detail key values manually. A quick example Let's assume that you have the following model: Transactor model (Customer, Supplier) public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Item model, the order item. public class TestModelItem { [PrimaryKey(false)] public Guid ItemId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [DefaultValue(0)] public double Price { get; set; } } Order models. public class TestModelOrder { [PrimaryKey] public Guid OrderId { get; set; } [ForeignKey(\"TestModelTransactor\", \"TransactorId\")] public Guid TransactorId { get; set; } public DateTime OrderDateTime { get; set; } } public class TestModelOrderLine { [PrimaryKey] public Guid OrderLineId { get; set; } [ForeignKey(\"TestModelOrder\",\"OrderId\")] public Guid OrderId { get; set; } [ForeignKey(\"TestModelItem\", \"ItemId\")] public Guid ItemId { get; set; } [DefaultValue(0)] public double Quantity { get; set; } public double Price { get; set; } public double TotalPrice { get; set; } } Creating an OrpheusModule There are a couple of ways to instantiate an OrpheusModule, the most straight forward way is to use an IOrpheusModuleDefinition. Creating the definition object. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var moduleDefinition = db.CreateModuleDefinition(); Configuring the definition object. moduleDefinition.MainTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrder\",typeof(TestModelOrder)); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelTransactor\", typeof(TestModelTransactor))); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelItem\", typeof(TestModelItem))); var detailTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrderLine\", typeof(TestModelOrderLine)); detailTableOptions.MasterTableName = \"TestModelOrder\"; detailTableOptions.AddMasterKeyField(\"OrderId\"); moduleDefinition.DetailTableOptions.Add(detailTableOptions); Creating the module. var module = this.Database.CreateModule(moduleDefinition); Getting references to module tables. var transactors = module.GetReferenceTable<TestModelTransactor>(); var items = module.GetReferenceTable<TestModelItem>(); var orderLines = module.GetTable<TestModelOrderLine>(); var order = module.GetTable<TestModelOrder>(); Populating auxiliary data. //populating auxiliary data. transactors.Add(TestDatabase.GetTransactors()); items.Add(TestDatabase.GetItems()); using (var tr = this.Database.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } transactors.Load(); items.Load(); Entering a new order. order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); //OrderId will be set automatically. orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); module.Save();"
  },
  "documentation/orpheus_table.html": {
    "href": "documentation/orpheus_table.html",
    "title": "Orpheus Table | Orpheus",
    "keywords": "Orpheus Table Orpheus table is the core class of OrpheusORM. It is responsible for the actual executing of the Delete Update Insert commands to modify data. It's also responsible for loading data, with or without criteria. So you can load all the data of the underlying database table or a subset of it. It is model agnostic and you can declaratively define the model for the table. The model for the table is/should be basically a representation of the database table fields. When to use it There is no limitation per se, for when to use the OrpheusTable class. From a logical separation perspective, it would make more sense, if you were saving data to a table that has no detail tables. Orpheus Module is the class to use, when you have multiple tables, with dependencies to each other. A quick example Let's assume you have the following model public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } You can declare the table in your code public class TransactorsTable:OrpheusTable<TestModelTransactor> { } var transactorsTable = new TransactorsTable(); or create an instance of the table using the OrpheusDatabase IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); Note: The database does not keep a reference for the created table. After you have a table instance, you can add, update and delete data from your table. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); var transactor = new TestModelTransactor(){ TransactorId = Guid.NewGuid(), Code = '001', Description = 'Transactor1' }; transactorsTable.Add(transactor); transactorsTable.Save(); Note:The table save will be executed within a transaction, so in case of any error, changes will be rolled back."
  },
  "index.html": {
    "href": "index.html",
    "title": "Orpheus. | Orpheus",
    "keywords": "Orpheus. The lightweight ORM. Flexibility on creating schema, load/save data and configure complex constraints and relationships between models. Schema Creation: OrpheusORM has a built-in schema engine, which you can ,optionally, use to create and/or update your schema, based on your model classes. Model Binding By default Orpheus assumes that your table names will match your model class names. But you can override this assumption, by decorating your model classes with the [TableName] attribute and essentially map your model to the database table. Nested Data Using an OrpheusModule you can save nested data (master-detail-subdetail) with just one Save. All master-detail relationships and keys will be updated automatically."
  }
}